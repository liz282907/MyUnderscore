{
  "stats": {
    "suites": 4,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2017-05-15T07:11:42.171Z",
    "end": "2017-05-15T07:11:42.183Z",
    "duration": 12,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "underscore/Function tests: ",
        "suites": [
          {
            "title": "1. _.componse 函数：",
            "suites": [],
            "tests": [
              {
                "title": "should return a function ",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should return a function ",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var componsedFun = _main2.default.compose(new Function(), new Function());\nassert.equal(true, (0, _util.isTypeof)('Function')(componsedFun));",
                "err": {},
                "isRoot": false,
                "uuid": "5f3bedf0-c131-4e61-b54e-284d6727d3af",
                "parentUUID": "a5f2b105-9d10-437a-95a7-24c168f636ae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should passing returned value to next functions",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should passing returned value to next functions",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var greet = function greet(name) {\n                assert.equal(name, 'MOE!');\n            };",
                "err": {},
                "isRoot": false,
                "uuid": "73eadfc4-51f1-40f8-94a1-d148fb759b37",
                "parentUUID": "a5f2b105-9d10-437a-95a7-24c168f636ae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should chain functions and passing values to finally get the result",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should chain functions and passing values to finally get the result",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var greet = function greet(name) {\n                return 'hi ' + name;\n            };\n            var welcome = _main2.default.compose(greet, exclaim);\n            assert.equal('hi MOE!', welcome('moe'));",
                "err": {},
                "isRoot": false,
                "uuid": "d1948c0d-dce8-4b91-b601-3bdbad8da5d6",
                "parentUUID": "a5f2b105-9d10-437a-95a7-24c168f636ae",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/main.test.js",
            "uuid": "a5f2b105-9d10-437a-95a7-24c168f636ae",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/main.test.js",
            "passes": [
              {
                "title": "should return a function ",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should return a function ",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var componsedFun = _main2.default.compose(new Function(), new Function());\nassert.equal(true, (0, _util.isTypeof)('Function')(componsedFun));",
                "err": {},
                "isRoot": false,
                "uuid": "5f3bedf0-c131-4e61-b54e-284d6727d3af",
                "parentUUID": "a5f2b105-9d10-437a-95a7-24c168f636ae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should passing returned value to next functions",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should passing returned value to next functions",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var greet = function greet(name) {\n                assert.equal(name, 'MOE!');\n            };",
                "err": {},
                "isRoot": false,
                "uuid": "73eadfc4-51f1-40f8-94a1-d148fb759b37",
                "parentUUID": "a5f2b105-9d10-437a-95a7-24c168f636ae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should chain functions and passing values to finally get the result",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should chain functions and passing values to finally get the result",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var greet = function greet(name) {\n                return 'hi ' + name;\n            };\n            var welcome = _main2.default.compose(greet, exclaim);\n            assert.equal('hi MOE!', welcome('moe'));",
                "err": {},
                "isRoot": false,
                "uuid": "d1948c0d-dce8-4b91-b601-3bdbad8da5d6",
                "parentUUID": "a5f2b105-9d10-437a-95a7-24c168f636ae",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "2. _.after 函数：",
            "suites": [],
            "tests": [
              {
                "title": "should be excuted until all have excuted ",
                "fullTitle": "underscore/Function tests:  2. _.after 函数： should be excuted until all have excuted ",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var _this = this;\nvar count = 0;\nvar render = function render() {\n    // console.log('---done!---')\n    assert.equal(count, notes.length);\n    done();\n};\nvar renderNotes = _main2.default.after(notes.length, render);\nnotes.forEach(function (note) {\n    var fn = function (note) {\n        count++;\n        // console.log('  note  ',note);\n        renderNotes();\n    }.bind(_this, note);\n    (0, _util.asyncFunction)(fn);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5cb953cf-01db-4207-9d8c-70aa1244b585",
                "parentUUID": "caa185c4-b81c-444a-a7e3-53454e5ed757",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/main.test.js",
            "uuid": "caa185c4-b81c-444a-a7e3-53454e5ed757",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/main.test.js",
            "passes": [
              {
                "title": "should be excuted until all have excuted ",
                "fullTitle": "underscore/Function tests:  2. _.after 函数： should be excuted until all have excuted ",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var _this = this;\nvar count = 0;\nvar render = function render() {\n    // console.log('---done!---')\n    assert.equal(count, notes.length);\n    done();\n};\nvar renderNotes = _main2.default.after(notes.length, render);\nnotes.forEach(function (note) {\n    var fn = function (note) {\n        count++;\n        // console.log('  note  ',note);\n        renderNotes();\n    }.bind(_this, note);\n    (0, _util.asyncFunction)(fn);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "5cb953cf-01db-4207-9d8c-70aa1244b585",
                "parentUUID": "caa185c4-b81c-444a-a7e3-53454e5ed757",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          },
          {
            "title": "3. _.before 函数：",
            "suites": [],
            "tests": [
              {
                "title": "should return the same result after count",
                "fullTitle": "underscore/Function tests:  3. _.before 函数： should return the same result after count",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var initial = 1000,\n    step = 100;\nvar askForRaise = function (initial, step) {\n    var salary = initial;\n    return function () {\n        salary += step;\n        return salary;\n    };\n}(initial, step);\nvar raiseSalaryBy100 = _main2.default.before(count, askForRaise);\nvar randomExcutedCount = count + Math.floor(Math.random() * 100),\n    finalSalary = initial + step * count;\nvar result = Array.from(new Array(randomExcutedCount).keys()).every(function (index) {\n    var curSalary = raiseSalaryBy100();\n    if (index + 1 >= count) return finalSalary === curSalary;\n    return curSalary === initial + step * (index + 1);\n});\nassert.equal(result, true);",
                "err": {},
                "isRoot": false,
                "uuid": "00c7d335-4627-4515-b660-33b4fafde816",
                "parentUUID": "b4642f9a-f5f7-4b6f-91ad-85ae8e255e5e",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/main.test.js",
            "uuid": "b4642f9a-f5f7-4b6f-91ad-85ae8e255e5e",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/main.test.js",
            "passes": [
              {
                "title": "should return the same result after count",
                "fullTitle": "underscore/Function tests:  3. _.before 函数： should return the same result after count",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var initial = 1000,\n    step = 100;\nvar askForRaise = function (initial, step) {\n    var salary = initial;\n    return function () {\n        salary += step;\n        return salary;\n    };\n}(initial, step);\nvar raiseSalaryBy100 = _main2.default.before(count, askForRaise);\nvar randomExcutedCount = count + Math.floor(Math.random() * 100),\n    finalSalary = initial + step * count;\nvar result = Array.from(new Array(randomExcutedCount).keys()).every(function (index) {\n    var curSalary = raiseSalaryBy100();\n    if (index + 1 >= count) return finalSalary === curSalary;\n    return curSalary === initial + step * (index + 1);\n});\nassert.equal(result, true);",
                "err": {},
                "isRoot": false,
                "uuid": "00c7d335-4627-4515-b660-33b4fafde816",
                "parentUUID": "b4642f9a-f5f7-4b6f-91ad-85ae8e255e5e",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/main.test.js",
        "uuid": "03e6d102-6aef-4333-9a74-db14b913f6dc",
        "failedHooks": [],
        "fullFile": "/Users/luchen/Documents/study/test/underscore/test/main.test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasFailedHooks": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "de81a62e-b719-46ef-9c6f-ab0e3d59f0ca",
    "failedHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasFailedHooks": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should return a function ",
      "fullTitle": "1. _.componse 函数： should return a function ",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var componsedFun = _main2.default.compose(new Function(), new Function());\nassert.equal(true, (0, _util.isTypeof)('Function')(componsedFun));",
      "err": {},
      "isRoot": false,
      "uuid": "5f3bedf0-c131-4e61-b54e-284d6727d3af",
      "parentUUID": "a5f2b105-9d10-437a-95a7-24c168f636ae",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should passing returned value to next functions",
      "fullTitle": "1. _.componse 函数： should passing returned value to next functions",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var greet = function greet(name) {\n                assert.equal(name, 'MOE!');\n            };",
      "err": {},
      "isRoot": false,
      "uuid": "73eadfc4-51f1-40f8-94a1-d148fb759b37",
      "parentUUID": "a5f2b105-9d10-437a-95a7-24c168f636ae",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should chain functions and passing values to finally get the result",
      "fullTitle": "1. _.componse 函数： should chain functions and passing values to finally get the result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var greet = function greet(name) {\n                return 'hi ' + name;\n            };\n            var welcome = _main2.default.compose(greet, exclaim);\n            assert.equal('hi MOE!', welcome('moe'));",
      "err": {},
      "isRoot": false,
      "uuid": "d1948c0d-dce8-4b91-b601-3bdbad8da5d6",
      "parentUUID": "a5f2b105-9d10-437a-95a7-24c168f636ae",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be excuted until all have excuted ",
      "fullTitle": "2. _.after 函数： should be excuted until all have excuted ",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var _this = this;\nvar count = 0;\nvar render = function render() {\n    // console.log('---done!---')\n    assert.equal(count, notes.length);\n    done();\n};\nvar renderNotes = _main2.default.after(notes.length, render);\nnotes.forEach(function (note) {\n    var fn = function (note) {\n        count++;\n        // console.log('  note  ',note);\n        renderNotes();\n    }.bind(_this, note);\n    (0, _util.asyncFunction)(fn);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5cb953cf-01db-4207-9d8c-70aa1244b585",
      "parentUUID": "caa185c4-b81c-444a-a7e3-53454e5ed757",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the same result after count",
      "fullTitle": "3. _.before 函数： should return the same result after count",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var initial = 1000,\n    step = 100;\nvar askForRaise = function (initial, step) {\n    var salary = initial;\n    return function () {\n        salary += step;\n        return salary;\n    };\n}(initial, step);\nvar raiseSalaryBy100 = _main2.default.before(count, askForRaise);\nvar randomExcutedCount = count + Math.floor(Math.random() * 100),\n    finalSalary = initial + step * count;\nvar result = Array.from(new Array(randomExcutedCount).keys()).every(function (index) {\n    var curSalary = raiseSalaryBy100();\n    if (index + 1 >= count) return finalSalary === curSalary;\n    return curSalary === initial + step * (index + 1);\n});\nassert.equal(result, true);",
      "err": {},
      "isRoot": false,
      "uuid": "00c7d335-4627-4515-b660-33b4fafde816",
      "parentUUID": "b4642f9a-f5f7-4b6f-91ad-85ae8e255e5e",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should return a function ",
      "fullTitle": "1. _.componse 函数： should return a function ",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var componsedFun = _main2.default.compose(new Function(), new Function());\nassert.equal(true, (0, _util.isTypeof)('Function')(componsedFun));",
      "err": {},
      "isRoot": false,
      "uuid": "5f3bedf0-c131-4e61-b54e-284d6727d3af",
      "parentUUID": "a5f2b105-9d10-437a-95a7-24c168f636ae",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should passing returned value to next functions",
      "fullTitle": "1. _.componse 函数： should passing returned value to next functions",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var greet = function greet(name) {\n                assert.equal(name, 'MOE!');\n            };",
      "err": {},
      "isRoot": false,
      "uuid": "73eadfc4-51f1-40f8-94a1-d148fb759b37",
      "parentUUID": "a5f2b105-9d10-437a-95a7-24c168f636ae",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should chain functions and passing values to finally get the result",
      "fullTitle": "1. _.componse 函数： should chain functions and passing values to finally get the result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var greet = function greet(name) {\n                return 'hi ' + name;\n            };\n            var welcome = _main2.default.compose(greet, exclaim);\n            assert.equal('hi MOE!', welcome('moe'));",
      "err": {},
      "isRoot": false,
      "uuid": "d1948c0d-dce8-4b91-b601-3bdbad8da5d6",
      "parentUUID": "a5f2b105-9d10-437a-95a7-24c168f636ae",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be excuted until all have excuted ",
      "fullTitle": "2. _.after 函数： should be excuted until all have excuted ",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var _this = this;\nvar count = 0;\nvar render = function render() {\n    // console.log('---done!---')\n    assert.equal(count, notes.length);\n    done();\n};\nvar renderNotes = _main2.default.after(notes.length, render);\nnotes.forEach(function (note) {\n    var fn = function (note) {\n        count++;\n        // console.log('  note  ',note);\n        renderNotes();\n    }.bind(_this, note);\n    (0, _util.asyncFunction)(fn);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "5cb953cf-01db-4207-9d8c-70aa1244b585",
      "parentUUID": "caa185c4-b81c-444a-a7e3-53454e5ed757",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the same result after count",
      "fullTitle": "3. _.before 函数： should return the same result after count",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var initial = 1000,\n    step = 100;\nvar askForRaise = function (initial, step) {\n    var salary = initial;\n    return function () {\n        salary += step;\n        return salary;\n    };\n}(initial, step);\nvar raiseSalaryBy100 = _main2.default.before(count, askForRaise);\nvar randomExcutedCount = count + Math.floor(Math.random() * 100),\n    finalSalary = initial + step * count;\nvar result = Array.from(new Array(randomExcutedCount).keys()).every(function (index) {\n    var curSalary = raiseSalaryBy100();\n    if (index + 1 >= count) return finalSalary === curSalary;\n    return curSalary === initial + step * (index + 1);\n});\nassert.equal(result, true);",
      "err": {},
      "isRoot": false,
      "uuid": "00c7d335-4627-4515-b660-33b4fafde816",
      "parentUUID": "b4642f9a-f5f7-4b6f-91ad-85ae8e255e5e",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}
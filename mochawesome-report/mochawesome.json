{
  "stats": {
    "suites": 8,
    "tests": 19,
    "passes": 17,
    "pending": 0,
    "failures": 2,
    "start": "2017-05-18T06:14:48.499Z",
    "end": "2017-05-18T06:14:48.539Z",
    "duration": 40,
    "testsRegistered": 19,
    "passPercent": 89.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "underscore/Function tests: ",
        "suites": [
          {
            "title": "1. _.componse 函数：",
            "suites": [],
            "tests": [
              {
                "title": "should return a function ",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should return a function ",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var componsedFun = _main2.default.compose(new Function(), new Function());\nassert.equal(true, (0, _util.isTypeof)('Function')(componsedFun));",
                "err": {},
                "isRoot": false,
                "uuid": "f2eeb9a8-ea6b-4db0-bd99-eaa3c4c6eda7",
                "parentUUID": "36b51699-be15-4891-8e27-ece2808defb5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should passing returned value to next functions",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should passing returned value to next functions",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var greet = function greet(name) {\n                assert.equal(name, 'MOE!');\n            };",
                "err": {},
                "isRoot": false,
                "uuid": "910ba55a-24f4-482c-b89b-db98d84ec23a",
                "parentUUID": "36b51699-be15-4891-8e27-ece2808defb5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should chain functions and passing values to finally get the result",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should chain functions and passing values to finally get the result",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var greet = function greet(name) {\n                return 'hi ' + name;\n            };\n            var welcome = _main2.default.compose(greet, exclaim);\n            assert.equal('hi MOE!', welcome('moe'));",
                "err": {},
                "isRoot": false,
                "uuid": "dd07e7dc-638a-4902-9e05-64186d5722c1",
                "parentUUID": "36b51699-be15-4891-8e27-ece2808defb5",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/main.test.js",
            "uuid": "36b51699-be15-4891-8e27-ece2808defb5",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/main.test.js",
            "passes": [
              {
                "title": "should return a function ",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should return a function ",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var componsedFun = _main2.default.compose(new Function(), new Function());\nassert.equal(true, (0, _util.isTypeof)('Function')(componsedFun));",
                "err": {},
                "isRoot": false,
                "uuid": "f2eeb9a8-ea6b-4db0-bd99-eaa3c4c6eda7",
                "parentUUID": "36b51699-be15-4891-8e27-ece2808defb5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should passing returned value to next functions",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should passing returned value to next functions",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var greet = function greet(name) {\n                assert.equal(name, 'MOE!');\n            };",
                "err": {},
                "isRoot": false,
                "uuid": "910ba55a-24f4-482c-b89b-db98d84ec23a",
                "parentUUID": "36b51699-be15-4891-8e27-ece2808defb5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should chain functions and passing values to finally get the result",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should chain functions and passing values to finally get the result",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var greet = function greet(name) {\n                return 'hi ' + name;\n            };\n            var welcome = _main2.default.compose(greet, exclaim);\n            assert.equal('hi MOE!', welcome('moe'));",
                "err": {},
                "isRoot": false,
                "uuid": "dd07e7dc-638a-4902-9e05-64186d5722c1",
                "parentUUID": "36b51699-be15-4891-8e27-ece2808defb5",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          },
          {
            "title": "2. _.after 函数：",
            "suites": [],
            "tests": [
              {
                "title": "should be excuted until all have excuted ",
                "fullTitle": "underscore/Function tests:  2. _.after 函数： should be excuted until all have excuted ",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var _this = this;\nvar count = 0;\nvar render = function render() {\n    // console.log('---done!---')\n    assert.equal(count, notes.length);\n    done();\n};\nvar renderNotes = _main2.default.after(notes.length, render);\nnotes.forEach(function (note) {\n    var fn = function (note) {\n        count++;\n        // console.log('  note  ',note);\n        renderNotes();\n    }.bind(_this, note);\n    (0, _util.asyncFunction)(fn);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f897a4d6-33b5-4af7-b26b-00d102135935",
                "parentUUID": "34bbaaba-4bd9-443c-b801-dc1988c899b5",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/main.test.js",
            "uuid": "34bbaaba-4bd9-443c-b801-dc1988c899b5",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/main.test.js",
            "passes": [
              {
                "title": "should be excuted until all have excuted ",
                "fullTitle": "underscore/Function tests:  2. _.after 函数： should be excuted until all have excuted ",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var _this = this;\nvar count = 0;\nvar render = function render() {\n    // console.log('---done!---')\n    assert.equal(count, notes.length);\n    done();\n};\nvar renderNotes = _main2.default.after(notes.length, render);\nnotes.forEach(function (note) {\n    var fn = function (note) {\n        count++;\n        // console.log('  note  ',note);\n        renderNotes();\n    }.bind(_this, note);\n    (0, _util.asyncFunction)(fn);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f897a4d6-33b5-4af7-b26b-00d102135935",
                "parentUUID": "34bbaaba-4bd9-443c-b801-dc1988c899b5",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "3. _.before 函数：",
            "suites": [],
            "tests": [
              {
                "title": "should return the same result after count",
                "fullTitle": "underscore/Function tests:  3. _.before 函数： should return the same result after count",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var initial = 1000,\n    step = 100;\nvar askForRaise = function (initial, step) {\n    var salary = initial;\n    return function () {\n        salary += step;\n        return salary;\n    };\n}(initial, step);\nvar raiseSalaryBy100 = _main2.default.before(count, askForRaise);\nvar randomExcutedCount = count + Math.floor(Math.random() * 100),\n    finalSalary = initial + step * count;\nvar result = Array.from(new Array(randomExcutedCount).keys()).every(function (index) {\n    var curSalary = raiseSalaryBy100();\n    if (index + 1 >= count) return finalSalary === curSalary;\n    return curSalary === initial + step * (index + 1);\n});\nassert.equal(result, true);",
                "err": {},
                "isRoot": false,
                "uuid": "3442b168-2ce3-41c0-b322-69773e0eca8f",
                "parentUUID": "f4942eed-b81b-4d8f-923e-2a04ba84bcef",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/main.test.js",
            "uuid": "f4942eed-b81b-4d8f-923e-2a04ba84bcef",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/main.test.js",
            "passes": [
              {
                "title": "should return the same result after count",
                "fullTitle": "underscore/Function tests:  3. _.before 函数： should return the same result after count",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var initial = 1000,\n    step = 100;\nvar askForRaise = function (initial, step) {\n    var salary = initial;\n    return function () {\n        salary += step;\n        return salary;\n    };\n}(initial, step);\nvar raiseSalaryBy100 = _main2.default.before(count, askForRaise);\nvar randomExcutedCount = count + Math.floor(Math.random() * 100),\n    finalSalary = initial + step * count;\nvar result = Array.from(new Array(randomExcutedCount).keys()).every(function (index) {\n    var curSalary = raiseSalaryBy100();\n    if (index + 1 >= count) return finalSalary === curSalary;\n    return curSalary === initial + step * (index + 1);\n});\nassert.equal(result, true);",
                "err": {},
                "isRoot": false,
                "uuid": "3442b168-2ce3-41c0-b322-69773e0eca8f",
                "parentUUID": "f4942eed-b81b-4d8f-923e-2a04ba84bcef",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "4. _.partial 函数：",
            "suites": [],
            "tests": [
              {
                "title": "should pre-fill partial args and get final value",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： should pre-fill partial args and get final value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var add = function add(a, b) {\n    return a + b;\n};\nvar add5 = _main2.default.partial(add, 5);\nassert.equal(15, add5(10));",
                "err": {},
                "isRoot": false,
                "uuid": "2274cee1-7e7d-4dc7-b337-b79bc5b14f52",
                "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remain un-filled when passing _ to the args",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： should remain un-filled when passing _ to the args",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var selectMin = function selectMin() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n    }\n    return Math.min.apply(null, args);\n};\nvar selectMinArgs = _main2.default.partial(selectMin, _main2.default, 4, 5);\nassert.equal(4, selectMinArgs(10));",
                "err": {},
                "isRoot": false,
                "uuid": "c7a8db30-8a60-446d-95e2-c23df1f3584c",
                "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "accepts more arguments than the number of placeholders",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： accepts more arguments than the number of placeholders",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(5, func('a', 'c', 'e'));",
                "err": {},
                "isRoot": false,
                "uuid": "ea142022-52cd-4347-b8b8-410922812ace",
                "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cound remain arg length when some of the placeholders aren't fullfilled when calling",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： cound remain arg length when some of the placeholders aren't fullfilled when calling",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(4, func('a'));",
                "err": {},
                "isRoot": false,
                "uuid": "1d75f111-f3d4-482a-b226-e65efc78ca86",
                "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "unfilled placeholders are undefined",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： unfilled placeholders are undefined",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = _main2.default.partial(function () {\n    return arguments[2];\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(undefined, func('a'));",
                "err": {},
                "isRoot": false,
                "uuid": "759b5cbd-458b-4cb9-978e-0365c23d27e7",
                "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/main.test.js",
            "uuid": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/main.test.js",
            "passes": [
              {
                "title": "should pre-fill partial args and get final value",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： should pre-fill partial args and get final value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var add = function add(a, b) {\n    return a + b;\n};\nvar add5 = _main2.default.partial(add, 5);\nassert.equal(15, add5(10));",
                "err": {},
                "isRoot": false,
                "uuid": "2274cee1-7e7d-4dc7-b337-b79bc5b14f52",
                "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remain un-filled when passing _ to the args",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： should remain un-filled when passing _ to the args",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var selectMin = function selectMin() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n    }\n    return Math.min.apply(null, args);\n};\nvar selectMinArgs = _main2.default.partial(selectMin, _main2.default, 4, 5);\nassert.equal(4, selectMinArgs(10));",
                "err": {},
                "isRoot": false,
                "uuid": "c7a8db30-8a60-446d-95e2-c23df1f3584c",
                "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "accepts more arguments than the number of placeholders",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： accepts more arguments than the number of placeholders",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(5, func('a', 'c', 'e'));",
                "err": {},
                "isRoot": false,
                "uuid": "ea142022-52cd-4347-b8b8-410922812ace",
                "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cound remain arg length when some of the placeholders aren't fullfilled when calling",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： cound remain arg length when some of the placeholders aren't fullfilled when calling",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(4, func('a'));",
                "err": {},
                "isRoot": false,
                "uuid": "1d75f111-f3d4-482a-b226-e65efc78ca86",
                "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "unfilled placeholders are undefined",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： unfilled placeholders are undefined",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = _main2.default.partial(function () {\n    return arguments[2];\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(undefined, func('a'));",
                "err": {},
                "isRoot": false,
                "uuid": "759b5cbd-458b-4cb9-978e-0365c23d27e7",
                "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "5. _wrap函数 ",
            "suites": [],
            "tests": [
              {
                "title": "should wrap the given salutation function",
                "fullTitle": "underscore/Function tests:  5. _wrap函数  should wrap the given salutation function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nhello = _main2.default.wrap(hello, function (func) {\n    return \"before, \" + func(\"moe\") + \", after\";\n});\nassert.equal(hello(), 'before, hello: moe, after');",
                "err": {},
                "isRoot": false,
                "uuid": "8ddbb0ec-12aa-4204-a07c-6a98e3a2bf15",
                "parentUUID": "5b67afcb-428c-46b5-afb8-667aabd5f3ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should hold fn as the first parameter of the wrapper",
                "fullTitle": "underscore/Function tests:  5. _wrap函数  should hold fn as the first parameter of the wrapper",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nvar wrappedHello = _main2.default.wrap(hello, function (func) {\n    assert.equal(hello, func);\n    return \"before, \" + func(\"moe\") + \", after\";;\n});\nwrappedHello();",
                "err": {},
                "isRoot": false,
                "uuid": "ab3254f1-8524-4bf6-bc5d-c53921dbaaa0",
                "parentUUID": "5b67afcb-428c-46b5-afb8-667aabd5f3ad",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/main.test.js",
            "uuid": "5b67afcb-428c-46b5-afb8-667aabd5f3ad",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/main.test.js",
            "passes": [
              {
                "title": "should wrap the given salutation function",
                "fullTitle": "underscore/Function tests:  5. _wrap函数  should wrap the given salutation function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nhello = _main2.default.wrap(hello, function (func) {\n    return \"before, \" + func(\"moe\") + \", after\";\n});\nassert.equal(hello(), 'before, hello: moe, after');",
                "err": {},
                "isRoot": false,
                "uuid": "8ddbb0ec-12aa-4204-a07c-6a98e3a2bf15",
                "parentUUID": "5b67afcb-428c-46b5-afb8-667aabd5f3ad",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should hold fn as the first parameter of the wrapper",
                "fullTitle": "underscore/Function tests:  5. _wrap函数  should hold fn as the first parameter of the wrapper",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nvar wrappedHello = _main2.default.wrap(hello, function (func) {\n    assert.equal(hello, func);\n    return \"before, \" + func(\"moe\") + \", after\";;\n});\nwrappedHello();",
                "err": {},
                "isRoot": false,
                "uuid": "ab3254f1-8524-4bf6-bc5d-c53921dbaaa0",
                "parentUUID": "5b67afcb-428c-46b5-afb8-667aabd5f3ad",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "6. _memoize函数 ",
            "suites": [],
            "tests": [
              {
                "title": "should memoize the value of a fibonacci result and equal to it",
                "fullTitle": "underscore/Function tests:  6. _memoize函数  should memoize the value of a fibonacci result and equal to it",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var memoFib = _main2.default.memoize(fib);\nassert.equal(fib(10), 55);\nassert.equal(memoFib(10), 55);",
                "err": {},
                "isRoot": false,
                "uuid": "78b87ccd-0e6b-4ad9-a8e4-7bf104d1b05a",
                "parentUUID": "8defee42-de6c-49c9-b07a-955b770a1ddc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should memoize all the result of the function",
                "fullTitle": "underscore/Function tests:  6. _memoize函数  should memoize all the result of the function",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var upper = _main2.default.memoize(function (s) {\n    return s.toUpperCase();\n});\nassert.strictEqual(upper('foo'), 'FOO');\nassert.strictEqual(upper('bar'), 'BAR');\nassert.deepEqual(upper.cache, { 'foo': 'FOO', 'bar': 'BAR' }, 'cache return all the cached value');\nassert.property(upper, 'cache');",
                "err": {},
                "isRoot": false,
                "uuid": "79b73c10-5f39-4158-a529-e98b10a2499e",
                "parentUUID": "8defee42-de6c-49c9-b07a-955b770a1ddc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should store the hashed key as the cache key",
                "fullTitle": "underscore/Function tests:  6. _memoize函数  should store the hashed key as the cache key",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var objCacher = _main2.default.memoize(function (value, key) {\n    return { key: key, value: value };\n}, function (value, key) {\n    return key;\n});\nvar myObj = objCacher('a', 'alpha');\nvar myObjAlias = objCacher('b', 'alpha');\nassert.notStrictEqual(myObj, void 0, 'object is created if second argument used as key');\nassert.strictEqual(myObj, myObjAlias, 'object is cached if second argument used as key');\nassert.strictEqual(myObj.value, 'a', 'object is not modified if second argument used as key');",
                "err": {},
                "isRoot": false,
                "uuid": "fe5e3cc6-9be1-4706-867b-e028aefd543a",
                "parentUUID": "8defee42-de6c-49c9-b07a-955b770a1ddc",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/main.test.js",
            "uuid": "8defee42-de6c-49c9-b07a-955b770a1ddc",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/main.test.js",
            "passes": [
              {
                "title": "should memoize the value of a fibonacci result and equal to it",
                "fullTitle": "underscore/Function tests:  6. _memoize函数  should memoize the value of a fibonacci result and equal to it",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var memoFib = _main2.default.memoize(fib);\nassert.equal(fib(10), 55);\nassert.equal(memoFib(10), 55);",
                "err": {},
                "isRoot": false,
                "uuid": "78b87ccd-0e6b-4ad9-a8e4-7bf104d1b05a",
                "parentUUID": "8defee42-de6c-49c9-b07a-955b770a1ddc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should memoize all the result of the function",
                "fullTitle": "underscore/Function tests:  6. _memoize函数  should memoize all the result of the function",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var upper = _main2.default.memoize(function (s) {\n    return s.toUpperCase();\n});\nassert.strictEqual(upper('foo'), 'FOO');\nassert.strictEqual(upper('bar'), 'BAR');\nassert.deepEqual(upper.cache, { 'foo': 'FOO', 'bar': 'BAR' }, 'cache return all the cached value');\nassert.property(upper, 'cache');",
                "err": {},
                "isRoot": false,
                "uuid": "79b73c10-5f39-4158-a529-e98b10a2499e",
                "parentUUID": "8defee42-de6c-49c9-b07a-955b770a1ddc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should store the hashed key as the cache key",
                "fullTitle": "underscore/Function tests:  6. _memoize函数  should store the hashed key as the cache key",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var objCacher = _main2.default.memoize(function (value, key) {\n    return { key: key, value: value };\n}, function (value, key) {\n    return key;\n});\nvar myObj = objCacher('a', 'alpha');\nvar myObjAlias = objCacher('b', 'alpha');\nassert.notStrictEqual(myObj, void 0, 'object is created if second argument used as key');\nassert.strictEqual(myObj, myObjAlias, 'object is cached if second argument used as key');\nassert.strictEqual(myObj.value, 'a', 'object is not modified if second argument used as key');",
                "err": {},
                "isRoot": false,
                "uuid": "fe5e3cc6-9be1-4706-867b-e028aefd543a",
                "parentUUID": "8defee42-de6c-49c9-b07a-955b770a1ddc",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3,
            "rootEmpty": false
          },
          {
            "title": "7. _Bind 函数 ",
            "suites": [],
            "tests": [
              {
                "title": "should have correct prototype , there are two circumstances: especially when called via the new operator",
                "fullTitle": "underscore/Function tests:  7. _Bind 函数  should have correct prototype , there are two circumstances: especially when called via the new operator",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var F = function F() {\n    return this;\n};\nvar boundf = _main2.default.bind(F, { hello: 'moe curly' });\nvar Boundf = boundf; // make eslint happy.\nvar newBoundf = new Boundf();\nassert.strictEqual(newBoundf.hello, void 0, 'function should not be bound to the context, to comply with ECMAScript 5');\nassert.strictEqual(boundf().hello, 'moe curly', \"When called without the new operator, it's OK to be bound to the context\");\nassert.ok(newBoundf instanceof F, 'a bound instance is an instance of the original function');",
                "err": {},
                "isRoot": false,
                "uuid": "8d83cef9-9491-40e8-b33d-5bc4b47a9f99",
                "parentUUID": "81785ce8-bee9-40a5-aacf-25216e8db339",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can bind a function to a context",
                "fullTitle": "underscore/Function tests:  7. _Bind 函数  can bind a function to a context",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var context = { name: 'moe' };\nvar func = function func(arg) {\n    return 'name: ' + (this.name || arg);\n};\nvar bound = _main2.default.bind(func, context);\nassert.strictEqual(bound(), 'name: moe', 'can bind a function to a context');",
                "err": {},
                "isRoot": false,
                "uuid": "7e4f661d-5219-4787-bbd1-18f72e88a956",
                "parentUUID": "81785ce8-bee9-40a5-aacf-25216e8db339",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can bind without specifying a context",
                "fullTitle": "underscore/Function tests:  7. _Bind 函数  can bind without specifying a context",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var func = function func(arg) {\n    return 'name: ' + (this.name || arg);\n};\nvar bound = _main2.default.bind(func, null, 'curly');\nvar result = bound();\n// Work around a PhantomJS bug when applying a function with null|undefined.\nassert.ok(result === 'name: curly' || result === 'name: ' + window.name, 'can bind without specifying a context');",
                "err": {
                  "estack": "TypeError: Cannot read property 'name' of null\n    at func (test/main.test.js:183:36)\n    at Context.<anonymous> (test/main.test.js:187:26)"
                },
                "isRoot": false,
                "uuid": "8a8229b0-5af8-4e20-9655-85597de9dfe4",
                "parentUUID": "81785ce8-bee9-40a5-aacf-25216e8db339",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can be bound to any value",
                "fullTitle": "underscore/Function tests:  7. _Bind 函数  can be bound to any value",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var func = function func(salutation, firstname, lastname) {\n    return salutation + ': ' + firstname + ' ' + lastname;\n};\nfunc = _main2.default.bind(func, this, 'hello', 'moe', 'curly');\nassert.strictEqual(func(), 'hello: moe curly', 'the function was partially applied in advance and can accept multiple arguments');\nfunc = function func() {\n    return this;\n};\nassert.strictEqual(_typeof(_main2.default.bind(func, 0)()), 'object', 'binding a primitive to `this` returns a wrapped primitive');\nassert.strictEqual(_main2.default.bind(func, 0)().valueOf(), 0, 'can bind a function to `0`');\nassert.strictEqual(_main2.default.bind(func, '')().valueOf(), '', 'can bind a function to an empty string');\nassert.strictEqual(_main2.default.bind(func, false)().valueOf(), false, 'can bind a function to `false`');",
                "err": {
                  "name": "AssertionError",
                  "message": "binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'",
                  "showDiff": true,
                  "actual": "number",
                  "expected": "object",
                  "estack": "AssertionError: binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'\n    at Function.assert.strictEqual (node_modules/chai/lib/chai/interface/assert.js:178:32)\n    at Context.<anonymous> (test/main.test.js:199:20)",
                  "diff": "- number\n+ object\n",
                  "stack": "AssertionError: binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'\n    at Function.assert.strictEqual (node_modules/chai/lib/chai/interface/assert.js:178:32)\n    at Context.<anonymous> (test/main.test.js:199:20)"
                },
                "isRoot": false,
                "uuid": "71863bc0-4b90-4210-a803-ef4357a99110",
                "parentUUID": "81785ce8-bee9-40a5-aacf-25216e8db339",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/main.test.js",
            "uuid": "81785ce8-bee9-40a5-aacf-25216e8db339",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/main.test.js",
            "passes": [
              {
                "title": "should have correct prototype , there are two circumstances: especially when called via the new operator",
                "fullTitle": "underscore/Function tests:  7. _Bind 函数  should have correct prototype , there are two circumstances: especially when called via the new operator",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var F = function F() {\n    return this;\n};\nvar boundf = _main2.default.bind(F, { hello: 'moe curly' });\nvar Boundf = boundf; // make eslint happy.\nvar newBoundf = new Boundf();\nassert.strictEqual(newBoundf.hello, void 0, 'function should not be bound to the context, to comply with ECMAScript 5');\nassert.strictEqual(boundf().hello, 'moe curly', \"When called without the new operator, it's OK to be bound to the context\");\nassert.ok(newBoundf instanceof F, 'a bound instance is an instance of the original function');",
                "err": {},
                "isRoot": false,
                "uuid": "8d83cef9-9491-40e8-b33d-5bc4b47a9f99",
                "parentUUID": "81785ce8-bee9-40a5-aacf-25216e8db339",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can bind a function to a context",
                "fullTitle": "underscore/Function tests:  7. _Bind 函数  can bind a function to a context",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var context = { name: 'moe' };\nvar func = function func(arg) {\n    return 'name: ' + (this.name || arg);\n};\nvar bound = _main2.default.bind(func, context);\nassert.strictEqual(bound(), 'name: moe', 'can bind a function to a context');",
                "err": {},
                "isRoot": false,
                "uuid": "7e4f661d-5219-4787-bbd1-18f72e88a956",
                "parentUUID": "81785ce8-bee9-40a5-aacf-25216e8db339",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [
              {
                "title": "can bind without specifying a context",
                "fullTitle": "underscore/Function tests:  7. _Bind 函数  can bind without specifying a context",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var func = function func(arg) {\n    return 'name: ' + (this.name || arg);\n};\nvar bound = _main2.default.bind(func, null, 'curly');\nvar result = bound();\n// Work around a PhantomJS bug when applying a function with null|undefined.\nassert.ok(result === 'name: curly' || result === 'name: ' + window.name, 'can bind without specifying a context');",
                "err": {
                  "estack": "TypeError: Cannot read property 'name' of null\n    at func (test/main.test.js:183:36)\n    at Context.<anonymous> (test/main.test.js:187:26)"
                },
                "isRoot": false,
                "uuid": "8a8229b0-5af8-4e20-9655-85597de9dfe4",
                "parentUUID": "81785ce8-bee9-40a5-aacf-25216e8db339",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can be bound to any value",
                "fullTitle": "underscore/Function tests:  7. _Bind 函数  can be bound to any value",
                "timedOut": false,
                "duration": 2,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var func = function func(salutation, firstname, lastname) {\n    return salutation + ': ' + firstname + ' ' + lastname;\n};\nfunc = _main2.default.bind(func, this, 'hello', 'moe', 'curly');\nassert.strictEqual(func(), 'hello: moe curly', 'the function was partially applied in advance and can accept multiple arguments');\nfunc = function func() {\n    return this;\n};\nassert.strictEqual(_typeof(_main2.default.bind(func, 0)()), 'object', 'binding a primitive to `this` returns a wrapped primitive');\nassert.strictEqual(_main2.default.bind(func, 0)().valueOf(), 0, 'can bind a function to `0`');\nassert.strictEqual(_main2.default.bind(func, '')().valueOf(), '', 'can bind a function to an empty string');\nassert.strictEqual(_main2.default.bind(func, false)().valueOf(), false, 'can bind a function to `false`');",
                "err": {
                  "name": "AssertionError",
                  "message": "binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'",
                  "showDiff": true,
                  "actual": "number",
                  "expected": "object",
                  "estack": "AssertionError: binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'\n    at Function.assert.strictEqual (node_modules/chai/lib/chai/interface/assert.js:178:32)\n    at Context.<anonymous> (test/main.test.js:199:20)",
                  "diff": "- number\n+ object\n",
                  "stack": "AssertionError: binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'\n    at Function.assert.strictEqual (node_modules/chai/lib/chai/interface/assert.js:178:32)\n    at Context.<anonymous> (test/main.test.js:199:20)"
                },
                "isRoot": false,
                "uuid": "71863bc0-4b90-4210-a803-ef4357a99110",
                "parentUUID": "81785ce8-bee9-40a5-aacf-25216e8db339",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 2,
            "totalFailures": 2,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/main.test.js",
        "uuid": "075ed31a-7370-46cb-a95d-d802f343d269",
        "failedHooks": [],
        "fullFile": "/Users/luchen/Documents/study/test/underscore/test/main.test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasFailedHooks": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "1bd9c689-348e-49e5-acd1-edf2ec4c19f4",
    "failedHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasFailedHooks": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should return a function ",
      "fullTitle": "1. _.componse 函数： should return a function ",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var componsedFun = _main2.default.compose(new Function(), new Function());\nassert.equal(true, (0, _util.isTypeof)('Function')(componsedFun));",
      "err": {},
      "isRoot": false,
      "uuid": "f2eeb9a8-ea6b-4db0-bd99-eaa3c4c6eda7",
      "parentUUID": "36b51699-be15-4891-8e27-ece2808defb5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should passing returned value to next functions",
      "fullTitle": "1. _.componse 函数： should passing returned value to next functions",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var greet = function greet(name) {\n                assert.equal(name, 'MOE!');\n            };",
      "err": {},
      "isRoot": false,
      "uuid": "910ba55a-24f4-482c-b89b-db98d84ec23a",
      "parentUUID": "36b51699-be15-4891-8e27-ece2808defb5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should chain functions and passing values to finally get the result",
      "fullTitle": "1. _.componse 函数： should chain functions and passing values to finally get the result",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var greet = function greet(name) {\n                return 'hi ' + name;\n            };\n            var welcome = _main2.default.compose(greet, exclaim);\n            assert.equal('hi MOE!', welcome('moe'));",
      "err": {},
      "isRoot": false,
      "uuid": "dd07e7dc-638a-4902-9e05-64186d5722c1",
      "parentUUID": "36b51699-be15-4891-8e27-ece2808defb5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be excuted until all have excuted ",
      "fullTitle": "2. _.after 函数： should be excuted until all have excuted ",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var _this = this;\nvar count = 0;\nvar render = function render() {\n    // console.log('---done!---')\n    assert.equal(count, notes.length);\n    done();\n};\nvar renderNotes = _main2.default.after(notes.length, render);\nnotes.forEach(function (note) {\n    var fn = function (note) {\n        count++;\n        // console.log('  note  ',note);\n        renderNotes();\n    }.bind(_this, note);\n    (0, _util.asyncFunction)(fn);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f897a4d6-33b5-4af7-b26b-00d102135935",
      "parentUUID": "34bbaaba-4bd9-443c-b801-dc1988c899b5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the same result after count",
      "fullTitle": "3. _.before 函数： should return the same result after count",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var initial = 1000,\n    step = 100;\nvar askForRaise = function (initial, step) {\n    var salary = initial;\n    return function () {\n        salary += step;\n        return salary;\n    };\n}(initial, step);\nvar raiseSalaryBy100 = _main2.default.before(count, askForRaise);\nvar randomExcutedCount = count + Math.floor(Math.random() * 100),\n    finalSalary = initial + step * count;\nvar result = Array.from(new Array(randomExcutedCount).keys()).every(function (index) {\n    var curSalary = raiseSalaryBy100();\n    if (index + 1 >= count) return finalSalary === curSalary;\n    return curSalary === initial + step * (index + 1);\n});\nassert.equal(result, true);",
      "err": {},
      "isRoot": false,
      "uuid": "3442b168-2ce3-41c0-b322-69773e0eca8f",
      "parentUUID": "f4942eed-b81b-4d8f-923e-2a04ba84bcef",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should pre-fill partial args and get final value",
      "fullTitle": "4. _.partial 函数： should pre-fill partial args and get final value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var add = function add(a, b) {\n    return a + b;\n};\nvar add5 = _main2.default.partial(add, 5);\nassert.equal(15, add5(10));",
      "err": {},
      "isRoot": false,
      "uuid": "2274cee1-7e7d-4dc7-b337-b79bc5b14f52",
      "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should remain un-filled when passing _ to the args",
      "fullTitle": "4. _.partial 函数： should remain un-filled when passing _ to the args",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var selectMin = function selectMin() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n    }\n    return Math.min.apply(null, args);\n};\nvar selectMinArgs = _main2.default.partial(selectMin, _main2.default, 4, 5);\nassert.equal(4, selectMinArgs(10));",
      "err": {},
      "isRoot": false,
      "uuid": "c7a8db30-8a60-446d-95e2-c23df1f3584c",
      "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "accepts more arguments than the number of placeholders",
      "fullTitle": "4. _.partial 函数： accepts more arguments than the number of placeholders",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(5, func('a', 'c', 'e'));",
      "err": {},
      "isRoot": false,
      "uuid": "ea142022-52cd-4347-b8b8-410922812ace",
      "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "cound remain arg length when some of the placeholders aren't fullfilled when calling",
      "fullTitle": "4. _.partial 函数： cound remain arg length when some of the placeholders aren't fullfilled when calling",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(4, func('a'));",
      "err": {},
      "isRoot": false,
      "uuid": "1d75f111-f3d4-482a-b226-e65efc78ca86",
      "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "unfilled placeholders are undefined",
      "fullTitle": "4. _.partial 函数： unfilled placeholders are undefined",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var func = _main2.default.partial(function () {\n    return arguments[2];\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(undefined, func('a'));",
      "err": {},
      "isRoot": false,
      "uuid": "759b5cbd-458b-4cb9-978e-0365c23d27e7",
      "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should wrap the given salutation function",
      "fullTitle": "5. _wrap函数  should wrap the given salutation function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nhello = _main2.default.wrap(hello, function (func) {\n    return \"before, \" + func(\"moe\") + \", after\";\n});\nassert.equal(hello(), 'before, hello: moe, after');",
      "err": {},
      "isRoot": false,
      "uuid": "8ddbb0ec-12aa-4204-a07c-6a98e3a2bf15",
      "parentUUID": "5b67afcb-428c-46b5-afb8-667aabd5f3ad",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should hold fn as the first parameter of the wrapper",
      "fullTitle": "5. _wrap函数  should hold fn as the first parameter of the wrapper",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nvar wrappedHello = _main2.default.wrap(hello, function (func) {\n    assert.equal(hello, func);\n    return \"before, \" + func(\"moe\") + \", after\";;\n});\nwrappedHello();",
      "err": {},
      "isRoot": false,
      "uuid": "ab3254f1-8524-4bf6-bc5d-c53921dbaaa0",
      "parentUUID": "5b67afcb-428c-46b5-afb8-667aabd5f3ad",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should memoize the value of a fibonacci result and equal to it",
      "fullTitle": "6. _memoize函数  should memoize the value of a fibonacci result and equal to it",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var memoFib = _main2.default.memoize(fib);\nassert.equal(fib(10), 55);\nassert.equal(memoFib(10), 55);",
      "err": {},
      "isRoot": false,
      "uuid": "78b87ccd-0e6b-4ad9-a8e4-7bf104d1b05a",
      "parentUUID": "8defee42-de6c-49c9-b07a-955b770a1ddc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should memoize all the result of the function",
      "fullTitle": "6. _memoize函数  should memoize all the result of the function",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var upper = _main2.default.memoize(function (s) {\n    return s.toUpperCase();\n});\nassert.strictEqual(upper('foo'), 'FOO');\nassert.strictEqual(upper('bar'), 'BAR');\nassert.deepEqual(upper.cache, { 'foo': 'FOO', 'bar': 'BAR' }, 'cache return all the cached value');\nassert.property(upper, 'cache');",
      "err": {},
      "isRoot": false,
      "uuid": "79b73c10-5f39-4158-a529-e98b10a2499e",
      "parentUUID": "8defee42-de6c-49c9-b07a-955b770a1ddc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should store the hashed key as the cache key",
      "fullTitle": "6. _memoize函数  should store the hashed key as the cache key",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var objCacher = _main2.default.memoize(function (value, key) {\n    return { key: key, value: value };\n}, function (value, key) {\n    return key;\n});\nvar myObj = objCacher('a', 'alpha');\nvar myObjAlias = objCacher('b', 'alpha');\nassert.notStrictEqual(myObj, void 0, 'object is created if second argument used as key');\nassert.strictEqual(myObj, myObjAlias, 'object is cached if second argument used as key');\nassert.strictEqual(myObj.value, 'a', 'object is not modified if second argument used as key');",
      "err": {},
      "isRoot": false,
      "uuid": "fe5e3cc6-9be1-4706-867b-e028aefd543a",
      "parentUUID": "8defee42-de6c-49c9-b07a-955b770a1ddc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should have correct prototype , there are two circumstances: especially when called via the new operator",
      "fullTitle": "7. _Bind 函数  should have correct prototype , there are two circumstances: especially when called via the new operator",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var F = function F() {\n    return this;\n};\nvar boundf = _main2.default.bind(F, { hello: 'moe curly' });\nvar Boundf = boundf; // make eslint happy.\nvar newBoundf = new Boundf();\nassert.strictEqual(newBoundf.hello, void 0, 'function should not be bound to the context, to comply with ECMAScript 5');\nassert.strictEqual(boundf().hello, 'moe curly', \"When called without the new operator, it's OK to be bound to the context\");\nassert.ok(newBoundf instanceof F, 'a bound instance is an instance of the original function');",
      "err": {},
      "isRoot": false,
      "uuid": "8d83cef9-9491-40e8-b33d-5bc4b47a9f99",
      "parentUUID": "81785ce8-bee9-40a5-aacf-25216e8db339",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "can bind a function to a context",
      "fullTitle": "7. _Bind 函数  can bind a function to a context",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var context = { name: 'moe' };\nvar func = function func(arg) {\n    return 'name: ' + (this.name || arg);\n};\nvar bound = _main2.default.bind(func, context);\nassert.strictEqual(bound(), 'name: moe', 'can bind a function to a context');",
      "err": {},
      "isRoot": false,
      "uuid": "7e4f661d-5219-4787-bbd1-18f72e88a956",
      "parentUUID": "81785ce8-bee9-40a5-aacf-25216e8db339",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "can bind without specifying a context",
      "fullTitle": "7. _Bind 函数  can bind without specifying a context",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "var func = function func(arg) {\n    return 'name: ' + (this.name || arg);\n};\nvar bound = _main2.default.bind(func, null, 'curly');\nvar result = bound();\n// Work around a PhantomJS bug when applying a function with null|undefined.\nassert.ok(result === 'name: curly' || result === 'name: ' + window.name, 'can bind without specifying a context');",
      "err": {
        "estack": "TypeError: Cannot read property 'name' of null\n    at func (test/main.test.js:183:36)\n    at Context.<anonymous> (test/main.test.js:187:26)"
      },
      "isRoot": false,
      "uuid": "8a8229b0-5af8-4e20-9655-85597de9dfe4",
      "parentUUID": "81785ce8-bee9-40a5-aacf-25216e8db339",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "can be bound to any value",
      "fullTitle": "7. _Bind 函数  can be bound to any value",
      "timedOut": false,
      "duration": 2,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "var func = function func(salutation, firstname, lastname) {\n    return salutation + ': ' + firstname + ' ' + lastname;\n};\nfunc = _main2.default.bind(func, this, 'hello', 'moe', 'curly');\nassert.strictEqual(func(), 'hello: moe curly', 'the function was partially applied in advance and can accept multiple arguments');\nfunc = function func() {\n    return this;\n};\nassert.strictEqual(_typeof(_main2.default.bind(func, 0)()), 'object', 'binding a primitive to `this` returns a wrapped primitive');\nassert.strictEqual(_main2.default.bind(func, 0)().valueOf(), 0, 'can bind a function to `0`');\nassert.strictEqual(_main2.default.bind(func, '')().valueOf(), '', 'can bind a function to an empty string');\nassert.strictEqual(_main2.default.bind(func, false)().valueOf(), false, 'can bind a function to `false`');",
      "err": {
        "name": "AssertionError",
        "message": "binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'",
        "showDiff": true,
        "actual": "number",
        "expected": "object",
        "estack": "AssertionError: binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'\n    at Function.assert.strictEqual (node_modules/chai/lib/chai/interface/assert.js:178:32)\n    at Context.<anonymous> (test/main.test.js:199:20)",
        "diff": "- number\n+ object\n",
        "stack": "AssertionError: binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'\n    at Function.assert.strictEqual (node_modules/chai/lib/chai/interface/assert.js:178:32)\n    at Context.<anonymous> (test/main.test.js:199:20)"
      },
      "isRoot": false,
      "uuid": "71863bc0-4b90-4210-a803-ef4357a99110",
      "parentUUID": "81785ce8-bee9-40a5-aacf-25216e8db339",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should return a function ",
      "fullTitle": "1. _.componse 函数： should return a function ",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var componsedFun = _main2.default.compose(new Function(), new Function());\nassert.equal(true, (0, _util.isTypeof)('Function')(componsedFun));",
      "err": {},
      "isRoot": false,
      "uuid": "f2eeb9a8-ea6b-4db0-bd99-eaa3c4c6eda7",
      "parentUUID": "36b51699-be15-4891-8e27-ece2808defb5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should passing returned value to next functions",
      "fullTitle": "1. _.componse 函数： should passing returned value to next functions",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var greet = function greet(name) {\n                assert.equal(name, 'MOE!');\n            };",
      "err": {},
      "isRoot": false,
      "uuid": "910ba55a-24f4-482c-b89b-db98d84ec23a",
      "parentUUID": "36b51699-be15-4891-8e27-ece2808defb5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should chain functions and passing values to finally get the result",
      "fullTitle": "1. _.componse 函数： should chain functions and passing values to finally get the result",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var greet = function greet(name) {\n                return 'hi ' + name;\n            };\n            var welcome = _main2.default.compose(greet, exclaim);\n            assert.equal('hi MOE!', welcome('moe'));",
      "err": {},
      "isRoot": false,
      "uuid": "dd07e7dc-638a-4902-9e05-64186d5722c1",
      "parentUUID": "36b51699-be15-4891-8e27-ece2808defb5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be excuted until all have excuted ",
      "fullTitle": "2. _.after 函数： should be excuted until all have excuted ",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var _this = this;\nvar count = 0;\nvar render = function render() {\n    // console.log('---done!---')\n    assert.equal(count, notes.length);\n    done();\n};\nvar renderNotes = _main2.default.after(notes.length, render);\nnotes.forEach(function (note) {\n    var fn = function (note) {\n        count++;\n        // console.log('  note  ',note);\n        renderNotes();\n    }.bind(_this, note);\n    (0, _util.asyncFunction)(fn);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "f897a4d6-33b5-4af7-b26b-00d102135935",
      "parentUUID": "34bbaaba-4bd9-443c-b801-dc1988c899b5",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the same result after count",
      "fullTitle": "3. _.before 函数： should return the same result after count",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var initial = 1000,\n    step = 100;\nvar askForRaise = function (initial, step) {\n    var salary = initial;\n    return function () {\n        salary += step;\n        return salary;\n    };\n}(initial, step);\nvar raiseSalaryBy100 = _main2.default.before(count, askForRaise);\nvar randomExcutedCount = count + Math.floor(Math.random() * 100),\n    finalSalary = initial + step * count;\nvar result = Array.from(new Array(randomExcutedCount).keys()).every(function (index) {\n    var curSalary = raiseSalaryBy100();\n    if (index + 1 >= count) return finalSalary === curSalary;\n    return curSalary === initial + step * (index + 1);\n});\nassert.equal(result, true);",
      "err": {},
      "isRoot": false,
      "uuid": "3442b168-2ce3-41c0-b322-69773e0eca8f",
      "parentUUID": "f4942eed-b81b-4d8f-923e-2a04ba84bcef",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should pre-fill partial args and get final value",
      "fullTitle": "4. _.partial 函数： should pre-fill partial args and get final value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var add = function add(a, b) {\n    return a + b;\n};\nvar add5 = _main2.default.partial(add, 5);\nassert.equal(15, add5(10));",
      "err": {},
      "isRoot": false,
      "uuid": "2274cee1-7e7d-4dc7-b337-b79bc5b14f52",
      "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should remain un-filled when passing _ to the args",
      "fullTitle": "4. _.partial 函数： should remain un-filled when passing _ to the args",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var selectMin = function selectMin() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n    }\n    return Math.min.apply(null, args);\n};\nvar selectMinArgs = _main2.default.partial(selectMin, _main2.default, 4, 5);\nassert.equal(4, selectMinArgs(10));",
      "err": {},
      "isRoot": false,
      "uuid": "c7a8db30-8a60-446d-95e2-c23df1f3584c",
      "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "accepts more arguments than the number of placeholders",
      "fullTitle": "4. _.partial 函数： accepts more arguments than the number of placeholders",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(5, func('a', 'c', 'e'));",
      "err": {},
      "isRoot": false,
      "uuid": "ea142022-52cd-4347-b8b8-410922812ace",
      "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "cound remain arg length when some of the placeholders aren't fullfilled when calling",
      "fullTitle": "4. _.partial 函数： cound remain arg length when some of the placeholders aren't fullfilled when calling",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(4, func('a'));",
      "err": {},
      "isRoot": false,
      "uuid": "1d75f111-f3d4-482a-b226-e65efc78ca86",
      "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "unfilled placeholders are undefined",
      "fullTitle": "4. _.partial 函数： unfilled placeholders are undefined",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var func = _main2.default.partial(function () {\n    return arguments[2];\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(undefined, func('a'));",
      "err": {},
      "isRoot": false,
      "uuid": "759b5cbd-458b-4cb9-978e-0365c23d27e7",
      "parentUUID": "c7b5b1d0-0c68-4f85-a3b3-be1040764ce4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should wrap the given salutation function",
      "fullTitle": "5. _wrap函数  should wrap the given salutation function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nhello = _main2.default.wrap(hello, function (func) {\n    return \"before, \" + func(\"moe\") + \", after\";\n});\nassert.equal(hello(), 'before, hello: moe, after');",
      "err": {},
      "isRoot": false,
      "uuid": "8ddbb0ec-12aa-4204-a07c-6a98e3a2bf15",
      "parentUUID": "5b67afcb-428c-46b5-afb8-667aabd5f3ad",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should hold fn as the first parameter of the wrapper",
      "fullTitle": "5. _wrap函数  should hold fn as the first parameter of the wrapper",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nvar wrappedHello = _main2.default.wrap(hello, function (func) {\n    assert.equal(hello, func);\n    return \"before, \" + func(\"moe\") + \", after\";;\n});\nwrappedHello();",
      "err": {},
      "isRoot": false,
      "uuid": "ab3254f1-8524-4bf6-bc5d-c53921dbaaa0",
      "parentUUID": "5b67afcb-428c-46b5-afb8-667aabd5f3ad",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should memoize the value of a fibonacci result and equal to it",
      "fullTitle": "6. _memoize函数  should memoize the value of a fibonacci result and equal to it",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var memoFib = _main2.default.memoize(fib);\nassert.equal(fib(10), 55);\nassert.equal(memoFib(10), 55);",
      "err": {},
      "isRoot": false,
      "uuid": "78b87ccd-0e6b-4ad9-a8e4-7bf104d1b05a",
      "parentUUID": "8defee42-de6c-49c9-b07a-955b770a1ddc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should memoize all the result of the function",
      "fullTitle": "6. _memoize函数  should memoize all the result of the function",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var upper = _main2.default.memoize(function (s) {\n    return s.toUpperCase();\n});\nassert.strictEqual(upper('foo'), 'FOO');\nassert.strictEqual(upper('bar'), 'BAR');\nassert.deepEqual(upper.cache, { 'foo': 'FOO', 'bar': 'BAR' }, 'cache return all the cached value');\nassert.property(upper, 'cache');",
      "err": {},
      "isRoot": false,
      "uuid": "79b73c10-5f39-4158-a529-e98b10a2499e",
      "parentUUID": "8defee42-de6c-49c9-b07a-955b770a1ddc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should store the hashed key as the cache key",
      "fullTitle": "6. _memoize函数  should store the hashed key as the cache key",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var objCacher = _main2.default.memoize(function (value, key) {\n    return { key: key, value: value };\n}, function (value, key) {\n    return key;\n});\nvar myObj = objCacher('a', 'alpha');\nvar myObjAlias = objCacher('b', 'alpha');\nassert.notStrictEqual(myObj, void 0, 'object is created if second argument used as key');\nassert.strictEqual(myObj, myObjAlias, 'object is cached if second argument used as key');\nassert.strictEqual(myObj.value, 'a', 'object is not modified if second argument used as key');",
      "err": {},
      "isRoot": false,
      "uuid": "fe5e3cc6-9be1-4706-867b-e028aefd543a",
      "parentUUID": "8defee42-de6c-49c9-b07a-955b770a1ddc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should have correct prototype , there are two circumstances: especially when called via the new operator",
      "fullTitle": "7. _Bind 函数  should have correct prototype , there are two circumstances: especially when called via the new operator",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var F = function F() {\n    return this;\n};\nvar boundf = _main2.default.bind(F, { hello: 'moe curly' });\nvar Boundf = boundf; // make eslint happy.\nvar newBoundf = new Boundf();\nassert.strictEqual(newBoundf.hello, void 0, 'function should not be bound to the context, to comply with ECMAScript 5');\nassert.strictEqual(boundf().hello, 'moe curly', \"When called without the new operator, it's OK to be bound to the context\");\nassert.ok(newBoundf instanceof F, 'a bound instance is an instance of the original function');",
      "err": {},
      "isRoot": false,
      "uuid": "8d83cef9-9491-40e8-b33d-5bc4b47a9f99",
      "parentUUID": "81785ce8-bee9-40a5-aacf-25216e8db339",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "can bind a function to a context",
      "fullTitle": "7. _Bind 函数  can bind a function to a context",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var context = { name: 'moe' };\nvar func = function func(arg) {\n    return 'name: ' + (this.name || arg);\n};\nvar bound = _main2.default.bind(func, context);\nassert.strictEqual(bound(), 'name: moe', 'can bind a function to a context');",
      "err": {},
      "isRoot": false,
      "uuid": "7e4f661d-5219-4787-bbd1-18f72e88a956",
      "parentUUID": "81785ce8-bee9-40a5-aacf-25216e8db339",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "can bind without specifying a context",
      "fullTitle": "7. _Bind 函数  can bind without specifying a context",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "var func = function func(arg) {\n    return 'name: ' + (this.name || arg);\n};\nvar bound = _main2.default.bind(func, null, 'curly');\nvar result = bound();\n// Work around a PhantomJS bug when applying a function with null|undefined.\nassert.ok(result === 'name: curly' || result === 'name: ' + window.name, 'can bind without specifying a context');",
      "err": {
        "estack": "TypeError: Cannot read property 'name' of null\n    at func (test/main.test.js:183:36)\n    at Context.<anonymous> (test/main.test.js:187:26)"
      },
      "isRoot": false,
      "uuid": "8a8229b0-5af8-4e20-9655-85597de9dfe4",
      "parentUUID": "81785ce8-bee9-40a5-aacf-25216e8db339",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "can be bound to any value",
      "fullTitle": "7. _Bind 函数  can be bound to any value",
      "timedOut": false,
      "duration": 2,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "var func = function func(salutation, firstname, lastname) {\n    return salutation + ': ' + firstname + ' ' + lastname;\n};\nfunc = _main2.default.bind(func, this, 'hello', 'moe', 'curly');\nassert.strictEqual(func(), 'hello: moe curly', 'the function was partially applied in advance and can accept multiple arguments');\nfunc = function func() {\n    return this;\n};\nassert.strictEqual(_typeof(_main2.default.bind(func, 0)()), 'object', 'binding a primitive to `this` returns a wrapped primitive');\nassert.strictEqual(_main2.default.bind(func, 0)().valueOf(), 0, 'can bind a function to `0`');\nassert.strictEqual(_main2.default.bind(func, '')().valueOf(), '', 'can bind a function to an empty string');\nassert.strictEqual(_main2.default.bind(func, false)().valueOf(), false, 'can bind a function to `false`');",
      "err": {
        "name": "AssertionError",
        "message": "binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'",
        "showDiff": true,
        "actual": "number",
        "expected": "object",
        "estack": "AssertionError: binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'\n    at Function.assert.strictEqual (node_modules/chai/lib/chai/interface/assert.js:178:32)\n    at Context.<anonymous> (test/main.test.js:199:20)",
        "diff": "- number\n+ object\n",
        "stack": "AssertionError: binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'\n    at Function.assert.strictEqual (node_modules/chai/lib/chai/interface/assert.js:178:32)\n    at Context.<anonymous> (test/main.test.js:199:20)"
      },
      "isRoot": false,
      "uuid": "71863bc0-4b90-4210-a803-ef4357a99110",
      "parentUUID": "81785ce8-bee9-40a5-aacf-25216e8db339",
      "isHook": false,
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}
{
  "stats": {
    "suites": 7,
    "tests": 15,
    "passes": 15,
    "pending": 0,
    "failures": 0,
    "start": "2017-05-16T01:54:58.384Z",
    "end": "2017-05-16T01:54:58.399Z",
    "duration": 15,
    "testsRegistered": 15,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "underscore/Function tests: ",
        "suites": [
          {
            "title": "1. _.componse 函数：",
            "suites": [],
            "tests": [
              {
                "title": "should return a function ",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should return a function ",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var componsedFun = _main2.default.compose(new Function(), new Function());\nassert.equal(true, (0, _util.isTypeof)('Function')(componsedFun));",
                "err": {},
                "isRoot": false,
                "uuid": "6574ae2c-4906-4c7b-b0f7-20c9afb20b30",
                "parentUUID": "b1062aec-498a-4e9e-91b8-a4f0070c1513",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should passing returned value to next functions",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should passing returned value to next functions",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var greet = function greet(name) {\n                assert.equal(name, 'MOE!');\n            };",
                "err": {},
                "isRoot": false,
                "uuid": "85f017d8-524a-43c6-bf83-a02b9244ec1c",
                "parentUUID": "b1062aec-498a-4e9e-91b8-a4f0070c1513",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should chain functions and passing values to finally get the result",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should chain functions and passing values to finally get the result",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var greet = function greet(name) {\n                return 'hi ' + name;\n            };\n            var welcome = _main2.default.compose(greet, exclaim);\n            assert.equal('hi MOE!', welcome('moe'));",
                "err": {},
                "isRoot": false,
                "uuid": "517ea8d6-6673-4843-8921-c4989181e84b",
                "parentUUID": "b1062aec-498a-4e9e-91b8-a4f0070c1513",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/main.test.js",
            "uuid": "b1062aec-498a-4e9e-91b8-a4f0070c1513",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/main.test.js",
            "passes": [
              {
                "title": "should return a function ",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should return a function ",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var componsedFun = _main2.default.compose(new Function(), new Function());\nassert.equal(true, (0, _util.isTypeof)('Function')(componsedFun));",
                "err": {},
                "isRoot": false,
                "uuid": "6574ae2c-4906-4c7b-b0f7-20c9afb20b30",
                "parentUUID": "b1062aec-498a-4e9e-91b8-a4f0070c1513",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should passing returned value to next functions",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should passing returned value to next functions",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var greet = function greet(name) {\n                assert.equal(name, 'MOE!');\n            };",
                "err": {},
                "isRoot": false,
                "uuid": "85f017d8-524a-43c6-bf83-a02b9244ec1c",
                "parentUUID": "b1062aec-498a-4e9e-91b8-a4f0070c1513",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should chain functions and passing values to finally get the result",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should chain functions and passing values to finally get the result",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var greet = function greet(name) {\n                return 'hi ' + name;\n            };\n            var welcome = _main2.default.compose(greet, exclaim);\n            assert.equal('hi MOE!', welcome('moe'));",
                "err": {},
                "isRoot": false,
                "uuid": "517ea8d6-6673-4843-8921-c4989181e84b",
                "parentUUID": "b1062aec-498a-4e9e-91b8-a4f0070c1513",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "2. _.after 函数：",
            "suites": [],
            "tests": [
              {
                "title": "should be excuted until all have excuted ",
                "fullTitle": "underscore/Function tests:  2. _.after 函数： should be excuted until all have excuted ",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var _this = this;\nvar count = 0;\nvar render = function render() {\n    // console.log('---done!---')\n    assert.equal(count, notes.length);\n    done();\n};\nvar renderNotes = _main2.default.after(notes.length, render);\nnotes.forEach(function (note) {\n    var fn = function (note) {\n        count++;\n        // console.log('  note  ',note);\n        renderNotes();\n    }.bind(_this, note);\n    (0, _util.asyncFunction)(fn);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1eef97bf-e324-4de6-9a0c-e26db37fdce3",
                "parentUUID": "641a01d9-d8be-4245-aa77-f21fbf3abb9f",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/main.test.js",
            "uuid": "641a01d9-d8be-4245-aa77-f21fbf3abb9f",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/main.test.js",
            "passes": [
              {
                "title": "should be excuted until all have excuted ",
                "fullTitle": "underscore/Function tests:  2. _.after 函数： should be excuted until all have excuted ",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var _this = this;\nvar count = 0;\nvar render = function render() {\n    // console.log('---done!---')\n    assert.equal(count, notes.length);\n    done();\n};\nvar renderNotes = _main2.default.after(notes.length, render);\nnotes.forEach(function (note) {\n    var fn = function (note) {\n        count++;\n        // console.log('  note  ',note);\n        renderNotes();\n    }.bind(_this, note);\n    (0, _util.asyncFunction)(fn);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1eef97bf-e324-4de6-9a0c-e26db37fdce3",
                "parentUUID": "641a01d9-d8be-4245-aa77-f21fbf3abb9f",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "3. _.before 函数：",
            "suites": [],
            "tests": [
              {
                "title": "should return the same result after count",
                "fullTitle": "underscore/Function tests:  3. _.before 函数： should return the same result after count",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var initial = 1000,\n    step = 100;\nvar askForRaise = function (initial, step) {\n    var salary = initial;\n    return function () {\n        salary += step;\n        return salary;\n    };\n}(initial, step);\nvar raiseSalaryBy100 = _main2.default.before(count, askForRaise);\nvar randomExcutedCount = count + Math.floor(Math.random() * 100),\n    finalSalary = initial + step * count;\nvar result = Array.from(new Array(randomExcutedCount).keys()).every(function (index) {\n    var curSalary = raiseSalaryBy100();\n    if (index + 1 >= count) return finalSalary === curSalary;\n    return curSalary === initial + step * (index + 1);\n});\nassert.equal(result, true);",
                "err": {},
                "isRoot": false,
                "uuid": "d4013c3a-daf5-4164-b73d-fb9c2281fae4",
                "parentUUID": "87424166-cb54-42c0-bec8-048ff40fe6c2",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/main.test.js",
            "uuid": "87424166-cb54-42c0-bec8-048ff40fe6c2",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/main.test.js",
            "passes": [
              {
                "title": "should return the same result after count",
                "fullTitle": "underscore/Function tests:  3. _.before 函数： should return the same result after count",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var initial = 1000,\n    step = 100;\nvar askForRaise = function (initial, step) {\n    var salary = initial;\n    return function () {\n        salary += step;\n        return salary;\n    };\n}(initial, step);\nvar raiseSalaryBy100 = _main2.default.before(count, askForRaise);\nvar randomExcutedCount = count + Math.floor(Math.random() * 100),\n    finalSalary = initial + step * count;\nvar result = Array.from(new Array(randomExcutedCount).keys()).every(function (index) {\n    var curSalary = raiseSalaryBy100();\n    if (index + 1 >= count) return finalSalary === curSalary;\n    return curSalary === initial + step * (index + 1);\n});\nassert.equal(result, true);",
                "err": {},
                "isRoot": false,
                "uuid": "d4013c3a-daf5-4164-b73d-fb9c2281fae4",
                "parentUUID": "87424166-cb54-42c0-bec8-048ff40fe6c2",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "4. _.partial 函数：",
            "suites": [],
            "tests": [
              {
                "title": "should pre-fill partial args and get final value",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： should pre-fill partial args and get final value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var add = function add(a, b) {\n    return a + b;\n};\nvar add5 = _main2.default.partial(add, 5);\nassert.equal(15, add5(10));",
                "err": {},
                "isRoot": false,
                "uuid": "13497ecf-cf5f-4200-95fc-3344cb737920",
                "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remain un-filled when passing _ to the args",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： should remain un-filled when passing _ to the args",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var selectMin = function selectMin() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n    }\n    return Math.min.apply(null, args);\n};\nvar selectMinArgs = _main2.default.partial(selectMin, _main2.default, 4, 5);\nassert.equal(4, selectMinArgs(10));",
                "err": {},
                "isRoot": false,
                "uuid": "d207f1f1-48de-4550-9d02-5d57c5f2b270",
                "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "accepts more arguments than the number of placeholders",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： accepts more arguments than the number of placeholders",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(5, func('a', 'c', 'e'));",
                "err": {},
                "isRoot": false,
                "uuid": "2ad6c4d1-95cb-4bfb-83c9-9489d1406015",
                "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cound remain arg length when some of the placeholders aren't fullfilled when calling",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： cound remain arg length when some of the placeholders aren't fullfilled when calling",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(4, func('a'));",
                "err": {},
                "isRoot": false,
                "uuid": "9927e66b-b542-489d-a03a-667072b2c504",
                "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "unfilled placeholders are undefined",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： unfilled placeholders are undefined",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = _main2.default.partial(function () {\n    return arguments[2];\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(undefined, func('a'));",
                "err": {},
                "isRoot": false,
                "uuid": "7fd206dd-e8ca-4977-ac29-5d8b26ae73b9",
                "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/main.test.js",
            "uuid": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/main.test.js",
            "passes": [
              {
                "title": "should pre-fill partial args and get final value",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： should pre-fill partial args and get final value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var add = function add(a, b) {\n    return a + b;\n};\nvar add5 = _main2.default.partial(add, 5);\nassert.equal(15, add5(10));",
                "err": {},
                "isRoot": false,
                "uuid": "13497ecf-cf5f-4200-95fc-3344cb737920",
                "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remain un-filled when passing _ to the args",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： should remain un-filled when passing _ to the args",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var selectMin = function selectMin() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n    }\n    return Math.min.apply(null, args);\n};\nvar selectMinArgs = _main2.default.partial(selectMin, _main2.default, 4, 5);\nassert.equal(4, selectMinArgs(10));",
                "err": {},
                "isRoot": false,
                "uuid": "d207f1f1-48de-4550-9d02-5d57c5f2b270",
                "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "accepts more arguments than the number of placeholders",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： accepts more arguments than the number of placeholders",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(5, func('a', 'c', 'e'));",
                "err": {},
                "isRoot": false,
                "uuid": "2ad6c4d1-95cb-4bfb-83c9-9489d1406015",
                "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cound remain arg length when some of the placeholders aren't fullfilled when calling",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： cound remain arg length when some of the placeholders aren't fullfilled when calling",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(4, func('a'));",
                "err": {},
                "isRoot": false,
                "uuid": "9927e66b-b542-489d-a03a-667072b2c504",
                "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "unfilled placeholders are undefined",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： unfilled placeholders are undefined",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = _main2.default.partial(function () {\n    return arguments[2];\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(undefined, func('a'));",
                "err": {},
                "isRoot": false,
                "uuid": "7fd206dd-e8ca-4977-ac29-5d8b26ae73b9",
                "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "5. _wrap函数 ",
            "suites": [],
            "tests": [
              {
                "title": "should wrap the given salutation function",
                "fullTitle": "underscore/Function tests:  5. _wrap函数  should wrap the given salutation function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nhello = _main2.default.wrap(hello, function (func) {\n    return \"before, \" + func(\"moe\") + \", after\";\n});\nassert.equal(hello(), 'before, hello: moe, after');",
                "err": {},
                "isRoot": false,
                "uuid": "327cc0da-c796-42ee-9873-f3acc30d5e31",
                "parentUUID": "5cdc3539-33f2-4d00-b741-aba9ec929074",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should hold fn as the first parameter of the wrapper",
                "fullTitle": "underscore/Function tests:  5. _wrap函数  should hold fn as the first parameter of the wrapper",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nvar wrappedHello = _main2.default.wrap(hello, function (func) {\n    assert.equal(hello, func);\n    return \"before, \" + func(\"moe\") + \", after\";;\n});\nwrappedHello();",
                "err": {},
                "isRoot": false,
                "uuid": "906c26c4-40c0-4d51-892e-91fded23f158",
                "parentUUID": "5cdc3539-33f2-4d00-b741-aba9ec929074",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/main.test.js",
            "uuid": "5cdc3539-33f2-4d00-b741-aba9ec929074",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/main.test.js",
            "passes": [
              {
                "title": "should wrap the given salutation function",
                "fullTitle": "underscore/Function tests:  5. _wrap函数  should wrap the given salutation function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nhello = _main2.default.wrap(hello, function (func) {\n    return \"before, \" + func(\"moe\") + \", after\";\n});\nassert.equal(hello(), 'before, hello: moe, after');",
                "err": {},
                "isRoot": false,
                "uuid": "327cc0da-c796-42ee-9873-f3acc30d5e31",
                "parentUUID": "5cdc3539-33f2-4d00-b741-aba9ec929074",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should hold fn as the first parameter of the wrapper",
                "fullTitle": "underscore/Function tests:  5. _wrap函数  should hold fn as the first parameter of the wrapper",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nvar wrappedHello = _main2.default.wrap(hello, function (func) {\n    assert.equal(hello, func);\n    return \"before, \" + func(\"moe\") + \", after\";;\n});\nwrappedHello();",
                "err": {},
                "isRoot": false,
                "uuid": "906c26c4-40c0-4d51-892e-91fded23f158",
                "parentUUID": "5cdc3539-33f2-4d00-b741-aba9ec929074",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "6. _memoize函数 ",
            "suites": [],
            "tests": [
              {
                "title": "should memoize the value of a fibonacci result and equal to it",
                "fullTitle": "underscore/Function tests:  6. _memoize函数  should memoize the value of a fibonacci result and equal to it",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var memoFib = _main2.default.memoize(fib);\nassert.equal(fib(10), 55);\nassert.equal(memoFib(10), 55);",
                "err": {},
                "isRoot": false,
                "uuid": "96e4a4df-6cc3-434c-980c-b9ca330d4b69",
                "parentUUID": "40ec6337-63c6-4898-a8e8-2f2e1a881a83",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should memoize all the result of the function",
                "fullTitle": "underscore/Function tests:  6. _memoize函数  should memoize all the result of the function",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var upper = _main2.default.memoize(function (s) {\n    return s.toUpperCase();\n});\nassert.strictEqual(upper('foo'), 'FOO');\nassert.strictEqual(upper('bar'), 'BAR');\nassert.deepEqual(upper.cache, { 'foo': 'FOO', 'bar': 'BAR' }, 'cache return all the cached value');\nassert.property(upper, 'cache');",
                "err": {},
                "isRoot": false,
                "uuid": "873c1912-039a-463f-8525-108f1252bc10",
                "parentUUID": "40ec6337-63c6-4898-a8e8-2f2e1a881a83",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should store the hashed key as the cache key",
                "fullTitle": "underscore/Function tests:  6. _memoize函数  should store the hashed key as the cache key",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var objCacher = _main2.default.memoize(function (value, key) {\n    return { key: key, value: value };\n}, function (value, key) {\n    return key;\n});\nvar myObj = objCacher('a', 'alpha');\nvar myObjAlias = objCacher('b', 'alpha');\nassert.notStrictEqual(myObj, void 0, 'object is created if second argument used as key');\nassert.strictEqual(myObj, myObjAlias, 'object is cached if second argument used as key');\nassert.strictEqual(myObj.value, 'a', 'object is not modified if second argument used as key');",
                "err": {},
                "isRoot": false,
                "uuid": "225a0678-f198-40d9-9429-b791132aecde",
                "parentUUID": "40ec6337-63c6-4898-a8e8-2f2e1a881a83",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/main.test.js",
            "uuid": "40ec6337-63c6-4898-a8e8-2f2e1a881a83",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/main.test.js",
            "passes": [
              {
                "title": "should memoize the value of a fibonacci result and equal to it",
                "fullTitle": "underscore/Function tests:  6. _memoize函数  should memoize the value of a fibonacci result and equal to it",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var memoFib = _main2.default.memoize(fib);\nassert.equal(fib(10), 55);\nassert.equal(memoFib(10), 55);",
                "err": {},
                "isRoot": false,
                "uuid": "96e4a4df-6cc3-434c-980c-b9ca330d4b69",
                "parentUUID": "40ec6337-63c6-4898-a8e8-2f2e1a881a83",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should memoize all the result of the function",
                "fullTitle": "underscore/Function tests:  6. _memoize函数  should memoize all the result of the function",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var upper = _main2.default.memoize(function (s) {\n    return s.toUpperCase();\n});\nassert.strictEqual(upper('foo'), 'FOO');\nassert.strictEqual(upper('bar'), 'BAR');\nassert.deepEqual(upper.cache, { 'foo': 'FOO', 'bar': 'BAR' }, 'cache return all the cached value');\nassert.property(upper, 'cache');",
                "err": {},
                "isRoot": false,
                "uuid": "873c1912-039a-463f-8525-108f1252bc10",
                "parentUUID": "40ec6337-63c6-4898-a8e8-2f2e1a881a83",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should store the hashed key as the cache key",
                "fullTitle": "underscore/Function tests:  6. _memoize函数  should store the hashed key as the cache key",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var objCacher = _main2.default.memoize(function (value, key) {\n    return { key: key, value: value };\n}, function (value, key) {\n    return key;\n});\nvar myObj = objCacher('a', 'alpha');\nvar myObjAlias = objCacher('b', 'alpha');\nassert.notStrictEqual(myObj, void 0, 'object is created if second argument used as key');\nassert.strictEqual(myObj, myObjAlias, 'object is cached if second argument used as key');\nassert.strictEqual(myObj.value, 'a', 'object is not modified if second argument used as key');",
                "err": {},
                "isRoot": false,
                "uuid": "225a0678-f198-40d9-9429-b791132aecde",
                "parentUUID": "40ec6337-63c6-4898-a8e8-2f2e1a881a83",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/main.test.js",
        "uuid": "2692f970-9738-4325-9d53-d408f86260cd",
        "failedHooks": [],
        "fullFile": "/Users/luchen/Documents/study/test/underscore/test/main.test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasFailedHooks": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "5a09be2d-16d2-447b-8313-bc4e7de904f2",
    "failedHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasFailedHooks": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should return a function ",
      "fullTitle": "1. _.componse 函数： should return a function ",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var componsedFun = _main2.default.compose(new Function(), new Function());\nassert.equal(true, (0, _util.isTypeof)('Function')(componsedFun));",
      "err": {},
      "isRoot": false,
      "uuid": "6574ae2c-4906-4c7b-b0f7-20c9afb20b30",
      "parentUUID": "b1062aec-498a-4e9e-91b8-a4f0070c1513",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should passing returned value to next functions",
      "fullTitle": "1. _.componse 函数： should passing returned value to next functions",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var greet = function greet(name) {\n                assert.equal(name, 'MOE!');\n            };",
      "err": {},
      "isRoot": false,
      "uuid": "85f017d8-524a-43c6-bf83-a02b9244ec1c",
      "parentUUID": "b1062aec-498a-4e9e-91b8-a4f0070c1513",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should chain functions and passing values to finally get the result",
      "fullTitle": "1. _.componse 函数： should chain functions and passing values to finally get the result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var greet = function greet(name) {\n                return 'hi ' + name;\n            };\n            var welcome = _main2.default.compose(greet, exclaim);\n            assert.equal('hi MOE!', welcome('moe'));",
      "err": {},
      "isRoot": false,
      "uuid": "517ea8d6-6673-4843-8921-c4989181e84b",
      "parentUUID": "b1062aec-498a-4e9e-91b8-a4f0070c1513",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be excuted until all have excuted ",
      "fullTitle": "2. _.after 函数： should be excuted until all have excuted ",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var _this = this;\nvar count = 0;\nvar render = function render() {\n    // console.log('---done!---')\n    assert.equal(count, notes.length);\n    done();\n};\nvar renderNotes = _main2.default.after(notes.length, render);\nnotes.forEach(function (note) {\n    var fn = function (note) {\n        count++;\n        // console.log('  note  ',note);\n        renderNotes();\n    }.bind(_this, note);\n    (0, _util.asyncFunction)(fn);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1eef97bf-e324-4de6-9a0c-e26db37fdce3",
      "parentUUID": "641a01d9-d8be-4245-aa77-f21fbf3abb9f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the same result after count",
      "fullTitle": "3. _.before 函数： should return the same result after count",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var initial = 1000,\n    step = 100;\nvar askForRaise = function (initial, step) {\n    var salary = initial;\n    return function () {\n        salary += step;\n        return salary;\n    };\n}(initial, step);\nvar raiseSalaryBy100 = _main2.default.before(count, askForRaise);\nvar randomExcutedCount = count + Math.floor(Math.random() * 100),\n    finalSalary = initial + step * count;\nvar result = Array.from(new Array(randomExcutedCount).keys()).every(function (index) {\n    var curSalary = raiseSalaryBy100();\n    if (index + 1 >= count) return finalSalary === curSalary;\n    return curSalary === initial + step * (index + 1);\n});\nassert.equal(result, true);",
      "err": {},
      "isRoot": false,
      "uuid": "d4013c3a-daf5-4164-b73d-fb9c2281fae4",
      "parentUUID": "87424166-cb54-42c0-bec8-048ff40fe6c2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should pre-fill partial args and get final value",
      "fullTitle": "4. _.partial 函数： should pre-fill partial args and get final value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var add = function add(a, b) {\n    return a + b;\n};\nvar add5 = _main2.default.partial(add, 5);\nassert.equal(15, add5(10));",
      "err": {},
      "isRoot": false,
      "uuid": "13497ecf-cf5f-4200-95fc-3344cb737920",
      "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should remain un-filled when passing _ to the args",
      "fullTitle": "4. _.partial 函数： should remain un-filled when passing _ to the args",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var selectMin = function selectMin() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n    }\n    return Math.min.apply(null, args);\n};\nvar selectMinArgs = _main2.default.partial(selectMin, _main2.default, 4, 5);\nassert.equal(4, selectMinArgs(10));",
      "err": {},
      "isRoot": false,
      "uuid": "d207f1f1-48de-4550-9d02-5d57c5f2b270",
      "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "accepts more arguments than the number of placeholders",
      "fullTitle": "4. _.partial 函数： accepts more arguments than the number of placeholders",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(5, func('a', 'c', 'e'));",
      "err": {},
      "isRoot": false,
      "uuid": "2ad6c4d1-95cb-4bfb-83c9-9489d1406015",
      "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "cound remain arg length when some of the placeholders aren't fullfilled when calling",
      "fullTitle": "4. _.partial 函数： cound remain arg length when some of the placeholders aren't fullfilled when calling",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(4, func('a'));",
      "err": {},
      "isRoot": false,
      "uuid": "9927e66b-b542-489d-a03a-667072b2c504",
      "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "unfilled placeholders are undefined",
      "fullTitle": "4. _.partial 函数： unfilled placeholders are undefined",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var func = _main2.default.partial(function () {\n    return arguments[2];\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(undefined, func('a'));",
      "err": {},
      "isRoot": false,
      "uuid": "7fd206dd-e8ca-4977-ac29-5d8b26ae73b9",
      "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should wrap the given salutation function",
      "fullTitle": "5. _wrap函数  should wrap the given salutation function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nhello = _main2.default.wrap(hello, function (func) {\n    return \"before, \" + func(\"moe\") + \", after\";\n});\nassert.equal(hello(), 'before, hello: moe, after');",
      "err": {},
      "isRoot": false,
      "uuid": "327cc0da-c796-42ee-9873-f3acc30d5e31",
      "parentUUID": "5cdc3539-33f2-4d00-b741-aba9ec929074",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should hold fn as the first parameter of the wrapper",
      "fullTitle": "5. _wrap函数  should hold fn as the first parameter of the wrapper",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nvar wrappedHello = _main2.default.wrap(hello, function (func) {\n    assert.equal(hello, func);\n    return \"before, \" + func(\"moe\") + \", after\";;\n});\nwrappedHello();",
      "err": {},
      "isRoot": false,
      "uuid": "906c26c4-40c0-4d51-892e-91fded23f158",
      "parentUUID": "5cdc3539-33f2-4d00-b741-aba9ec929074",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should memoize the value of a fibonacci result and equal to it",
      "fullTitle": "6. _memoize函数  should memoize the value of a fibonacci result and equal to it",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var memoFib = _main2.default.memoize(fib);\nassert.equal(fib(10), 55);\nassert.equal(memoFib(10), 55);",
      "err": {},
      "isRoot": false,
      "uuid": "96e4a4df-6cc3-434c-980c-b9ca330d4b69",
      "parentUUID": "40ec6337-63c6-4898-a8e8-2f2e1a881a83",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should memoize all the result of the function",
      "fullTitle": "6. _memoize函数  should memoize all the result of the function",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var upper = _main2.default.memoize(function (s) {\n    return s.toUpperCase();\n});\nassert.strictEqual(upper('foo'), 'FOO');\nassert.strictEqual(upper('bar'), 'BAR');\nassert.deepEqual(upper.cache, { 'foo': 'FOO', 'bar': 'BAR' }, 'cache return all the cached value');\nassert.property(upper, 'cache');",
      "err": {},
      "isRoot": false,
      "uuid": "873c1912-039a-463f-8525-108f1252bc10",
      "parentUUID": "40ec6337-63c6-4898-a8e8-2f2e1a881a83",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should store the hashed key as the cache key",
      "fullTitle": "6. _memoize函数  should store the hashed key as the cache key",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var objCacher = _main2.default.memoize(function (value, key) {\n    return { key: key, value: value };\n}, function (value, key) {\n    return key;\n});\nvar myObj = objCacher('a', 'alpha');\nvar myObjAlias = objCacher('b', 'alpha');\nassert.notStrictEqual(myObj, void 0, 'object is created if second argument used as key');\nassert.strictEqual(myObj, myObjAlias, 'object is cached if second argument used as key');\nassert.strictEqual(myObj.value, 'a', 'object is not modified if second argument used as key');",
      "err": {},
      "isRoot": false,
      "uuid": "225a0678-f198-40d9-9429-b791132aecde",
      "parentUUID": "40ec6337-63c6-4898-a8e8-2f2e1a881a83",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should return a function ",
      "fullTitle": "1. _.componse 函数： should return a function ",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var componsedFun = _main2.default.compose(new Function(), new Function());\nassert.equal(true, (0, _util.isTypeof)('Function')(componsedFun));",
      "err": {},
      "isRoot": false,
      "uuid": "6574ae2c-4906-4c7b-b0f7-20c9afb20b30",
      "parentUUID": "b1062aec-498a-4e9e-91b8-a4f0070c1513",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should passing returned value to next functions",
      "fullTitle": "1. _.componse 函数： should passing returned value to next functions",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var greet = function greet(name) {\n                assert.equal(name, 'MOE!');\n            };",
      "err": {},
      "isRoot": false,
      "uuid": "85f017d8-524a-43c6-bf83-a02b9244ec1c",
      "parentUUID": "b1062aec-498a-4e9e-91b8-a4f0070c1513",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should chain functions and passing values to finally get the result",
      "fullTitle": "1. _.componse 函数： should chain functions and passing values to finally get the result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var greet = function greet(name) {\n                return 'hi ' + name;\n            };\n            var welcome = _main2.default.compose(greet, exclaim);\n            assert.equal('hi MOE!', welcome('moe'));",
      "err": {},
      "isRoot": false,
      "uuid": "517ea8d6-6673-4843-8921-c4989181e84b",
      "parentUUID": "b1062aec-498a-4e9e-91b8-a4f0070c1513",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be excuted until all have excuted ",
      "fullTitle": "2. _.after 函数： should be excuted until all have excuted ",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var _this = this;\nvar count = 0;\nvar render = function render() {\n    // console.log('---done!---')\n    assert.equal(count, notes.length);\n    done();\n};\nvar renderNotes = _main2.default.after(notes.length, render);\nnotes.forEach(function (note) {\n    var fn = function (note) {\n        count++;\n        // console.log('  note  ',note);\n        renderNotes();\n    }.bind(_this, note);\n    (0, _util.asyncFunction)(fn);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "1eef97bf-e324-4de6-9a0c-e26db37fdce3",
      "parentUUID": "641a01d9-d8be-4245-aa77-f21fbf3abb9f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the same result after count",
      "fullTitle": "3. _.before 函数： should return the same result after count",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var initial = 1000,\n    step = 100;\nvar askForRaise = function (initial, step) {\n    var salary = initial;\n    return function () {\n        salary += step;\n        return salary;\n    };\n}(initial, step);\nvar raiseSalaryBy100 = _main2.default.before(count, askForRaise);\nvar randomExcutedCount = count + Math.floor(Math.random() * 100),\n    finalSalary = initial + step * count;\nvar result = Array.from(new Array(randomExcutedCount).keys()).every(function (index) {\n    var curSalary = raiseSalaryBy100();\n    if (index + 1 >= count) return finalSalary === curSalary;\n    return curSalary === initial + step * (index + 1);\n});\nassert.equal(result, true);",
      "err": {},
      "isRoot": false,
      "uuid": "d4013c3a-daf5-4164-b73d-fb9c2281fae4",
      "parentUUID": "87424166-cb54-42c0-bec8-048ff40fe6c2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should pre-fill partial args and get final value",
      "fullTitle": "4. _.partial 函数： should pre-fill partial args and get final value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var add = function add(a, b) {\n    return a + b;\n};\nvar add5 = _main2.default.partial(add, 5);\nassert.equal(15, add5(10));",
      "err": {},
      "isRoot": false,
      "uuid": "13497ecf-cf5f-4200-95fc-3344cb737920",
      "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should remain un-filled when passing _ to the args",
      "fullTitle": "4. _.partial 函数： should remain un-filled when passing _ to the args",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var selectMin = function selectMin() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n    }\n    return Math.min.apply(null, args);\n};\nvar selectMinArgs = _main2.default.partial(selectMin, _main2.default, 4, 5);\nassert.equal(4, selectMinArgs(10));",
      "err": {},
      "isRoot": false,
      "uuid": "d207f1f1-48de-4550-9d02-5d57c5f2b270",
      "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "accepts more arguments than the number of placeholders",
      "fullTitle": "4. _.partial 函数： accepts more arguments than the number of placeholders",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(5, func('a', 'c', 'e'));",
      "err": {},
      "isRoot": false,
      "uuid": "2ad6c4d1-95cb-4bfb-83c9-9489d1406015",
      "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "cound remain arg length when some of the placeholders aren't fullfilled when calling",
      "fullTitle": "4. _.partial 函数： cound remain arg length when some of the placeholders aren't fullfilled when calling",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(4, func('a'));",
      "err": {},
      "isRoot": false,
      "uuid": "9927e66b-b542-489d-a03a-667072b2c504",
      "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "unfilled placeholders are undefined",
      "fullTitle": "4. _.partial 函数： unfilled placeholders are undefined",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var func = _main2.default.partial(function () {\n    return arguments[2];\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(undefined, func('a'));",
      "err": {},
      "isRoot": false,
      "uuid": "7fd206dd-e8ca-4977-ac29-5d8b26ae73b9",
      "parentUUID": "88a4b388-a22f-4da4-bb60-5a7cf09e62fe",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should wrap the given salutation function",
      "fullTitle": "5. _wrap函数  should wrap the given salutation function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nhello = _main2.default.wrap(hello, function (func) {\n    return \"before, \" + func(\"moe\") + \", after\";\n});\nassert.equal(hello(), 'before, hello: moe, after');",
      "err": {},
      "isRoot": false,
      "uuid": "327cc0da-c796-42ee-9873-f3acc30d5e31",
      "parentUUID": "5cdc3539-33f2-4d00-b741-aba9ec929074",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should hold fn as the first parameter of the wrapper",
      "fullTitle": "5. _wrap函数  should hold fn as the first parameter of the wrapper",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nvar wrappedHello = _main2.default.wrap(hello, function (func) {\n    assert.equal(hello, func);\n    return \"before, \" + func(\"moe\") + \", after\";;\n});\nwrappedHello();",
      "err": {},
      "isRoot": false,
      "uuid": "906c26c4-40c0-4d51-892e-91fded23f158",
      "parentUUID": "5cdc3539-33f2-4d00-b741-aba9ec929074",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should memoize the value of a fibonacci result and equal to it",
      "fullTitle": "6. _memoize函数  should memoize the value of a fibonacci result and equal to it",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var memoFib = _main2.default.memoize(fib);\nassert.equal(fib(10), 55);\nassert.equal(memoFib(10), 55);",
      "err": {},
      "isRoot": false,
      "uuid": "96e4a4df-6cc3-434c-980c-b9ca330d4b69",
      "parentUUID": "40ec6337-63c6-4898-a8e8-2f2e1a881a83",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should memoize all the result of the function",
      "fullTitle": "6. _memoize函数  should memoize all the result of the function",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var upper = _main2.default.memoize(function (s) {\n    return s.toUpperCase();\n});\nassert.strictEqual(upper('foo'), 'FOO');\nassert.strictEqual(upper('bar'), 'BAR');\nassert.deepEqual(upper.cache, { 'foo': 'FOO', 'bar': 'BAR' }, 'cache return all the cached value');\nassert.property(upper, 'cache');",
      "err": {},
      "isRoot": false,
      "uuid": "873c1912-039a-463f-8525-108f1252bc10",
      "parentUUID": "40ec6337-63c6-4898-a8e8-2f2e1a881a83",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should store the hashed key as the cache key",
      "fullTitle": "6. _memoize函数  should store the hashed key as the cache key",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var objCacher = _main2.default.memoize(function (value, key) {\n    return { key: key, value: value };\n}, function (value, key) {\n    return key;\n});\nvar myObj = objCacher('a', 'alpha');\nvar myObjAlias = objCacher('b', 'alpha');\nassert.notStrictEqual(myObj, void 0, 'object is created if second argument used as key');\nassert.strictEqual(myObj, myObjAlias, 'object is cached if second argument used as key');\nassert.strictEqual(myObj.value, 'a', 'object is not modified if second argument used as key');",
      "err": {},
      "isRoot": false,
      "uuid": "225a0678-f198-40d9-9429-b791132aecde",
      "parentUUID": "40ec6337-63c6-4898-a8e8-2f2e1a881a83",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}
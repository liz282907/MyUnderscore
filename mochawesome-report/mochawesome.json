{
  "stats": {
    "suites": 14,
    "tests": 26,
    "passes": 24,
    "pending": 0,
    "failures": 2,
    "start": "2017-05-22T04:21:05.707Z",
    "end": "2017-05-22T04:21:05.724Z",
    "duration": 17,
    "testsRegistered": 26,
    "passPercent": 92.3,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "underscore/Function tests: ",
        "suites": [
          {
            "title": "1. _.componse 函数：",
            "suites": [],
            "tests": [
              {
                "title": "should return a function ",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should return a function ",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var componsedFun = _main2.default.compose(new Function(), new Function());\nassert.equal(true, (0, _util.isTypeof)('Function')(componsedFun));",
                "err": {},
                "isRoot": false,
                "uuid": "82565356-6b2e-4e62-9049-557806e3e0fe",
                "parentUUID": "77b7c14b-564d-4959-ad61-881d56887afc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should passing returned value to next functions",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should passing returned value to next functions",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var greet = function greet(name) {\n                assert.equal(name, 'MOE!');\n            };",
                "err": {},
                "isRoot": false,
                "uuid": "90dcef99-de3c-4b10-8134-dd02265630b6",
                "parentUUID": "77b7c14b-564d-4959-ad61-881d56887afc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should chain functions and passing values to finally get the result",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should chain functions and passing values to finally get the result",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var greet = function greet(name) {\n                return 'hi ' + name;\n            };\n            var welcome = _main2.default.compose(greet, exclaim);\n            assert.equal('hi MOE!', welcome('moe'));",
                "err": {},
                "isRoot": false,
                "uuid": "abe6682f-6065-4fdf-b53a-a9a7672fd72e",
                "parentUUID": "77b7c14b-564d-4959-ad61-881d56887afc",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/index.test.js",
            "uuid": "77b7c14b-564d-4959-ad61-881d56887afc",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/index.test.js",
            "passes": [
              {
                "title": "should return a function ",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should return a function ",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var componsedFun = _main2.default.compose(new Function(), new Function());\nassert.equal(true, (0, _util.isTypeof)('Function')(componsedFun));",
                "err": {},
                "isRoot": false,
                "uuid": "82565356-6b2e-4e62-9049-557806e3e0fe",
                "parentUUID": "77b7c14b-564d-4959-ad61-881d56887afc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should passing returned value to next functions",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should passing returned value to next functions",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var greet = function greet(name) {\n                assert.equal(name, 'MOE!');\n            };",
                "err": {},
                "isRoot": false,
                "uuid": "90dcef99-de3c-4b10-8134-dd02265630b6",
                "parentUUID": "77b7c14b-564d-4959-ad61-881d56887afc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should chain functions and passing values to finally get the result",
                "fullTitle": "underscore/Function tests:  1. _.componse 函数： should chain functions and passing values to finally get the result",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var greet = function greet(name) {\n                return 'hi ' + name;\n            };\n            var welcome = _main2.default.compose(greet, exclaim);\n            assert.equal('hi MOE!', welcome('moe'));",
                "err": {},
                "isRoot": false,
                "uuid": "abe6682f-6065-4fdf-b53a-a9a7672fd72e",
                "parentUUID": "77b7c14b-564d-4959-ad61-881d56887afc",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "2. _.after 函数：",
            "suites": [],
            "tests": [
              {
                "title": "should be excuted until all have excuted ",
                "fullTitle": "underscore/Function tests:  2. _.after 函数： should be excuted until all have excuted ",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var _this = this;\nvar count = 0;\nvar render = function render() {\n    // console.log('---done!---')\n    assert.equal(count, notes.length);\n    done();\n};\nvar renderNotes = _main2.default.after(notes.length, render);\nnotes.forEach(function (note) {\n    var fn = function (note) {\n        count++;\n        // console.log('  note  ',note);\n        renderNotes();\n    }.bind(_this, note);\n    (0, _util.asyncFunction)(fn);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "bd1a48b3-cb02-46b9-912a-3f9f7dfa3393",
                "parentUUID": "5aa2c644-7f3b-40e5-9e85-a30d6afca606",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/index.test.js",
            "uuid": "5aa2c644-7f3b-40e5-9e85-a30d6afca606",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/index.test.js",
            "passes": [
              {
                "title": "should be excuted until all have excuted ",
                "fullTitle": "underscore/Function tests:  2. _.after 函数： should be excuted until all have excuted ",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var _this = this;\nvar count = 0;\nvar render = function render() {\n    // console.log('---done!---')\n    assert.equal(count, notes.length);\n    done();\n};\nvar renderNotes = _main2.default.after(notes.length, render);\nnotes.forEach(function (note) {\n    var fn = function (note) {\n        count++;\n        // console.log('  note  ',note);\n        renderNotes();\n    }.bind(_this, note);\n    (0, _util.asyncFunction)(fn);\n});",
                "err": {},
                "isRoot": false,
                "uuid": "bd1a48b3-cb02-46b9-912a-3f9f7dfa3393",
                "parentUUID": "5aa2c644-7f3b-40e5-9e85-a30d6afca606",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "3. _.before 函数：",
            "suites": [],
            "tests": [
              {
                "title": "should return the same result after count",
                "fullTitle": "underscore/Function tests:  3. _.before 函数： should return the same result after count",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var initial = 1000,\n    step = 100;\nvar askForRaise = function (initial, step) {\n    var salary = initial;\n    return function () {\n        salary += step;\n        return salary;\n    };\n}(initial, step);\nvar raiseSalaryBy100 = _main2.default.before(count, askForRaise);\nvar randomExcutedCount = count + Math.floor(Math.random() * 100),\n    finalSalary = initial + step * count;\nvar result = Array.from(new Array(randomExcutedCount).keys()).every(function (index) {\n    var curSalary = raiseSalaryBy100();\n    if (index + 1 >= count) return finalSalary === curSalary;\n    return curSalary === initial + step * (index + 1);\n});\nassert.equal(result, true);",
                "err": {},
                "isRoot": false,
                "uuid": "34e53aab-133b-4dfa-aa20-0a8a77c6d5a7",
                "parentUUID": "7ff0ffda-55a0-4764-b9be-467e2e20dcc9",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/index.test.js",
            "uuid": "7ff0ffda-55a0-4764-b9be-467e2e20dcc9",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/index.test.js",
            "passes": [
              {
                "title": "should return the same result after count",
                "fullTitle": "underscore/Function tests:  3. _.before 函数： should return the same result after count",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var initial = 1000,\n    step = 100;\nvar askForRaise = function (initial, step) {\n    var salary = initial;\n    return function () {\n        salary += step;\n        return salary;\n    };\n}(initial, step);\nvar raiseSalaryBy100 = _main2.default.before(count, askForRaise);\nvar randomExcutedCount = count + Math.floor(Math.random() * 100),\n    finalSalary = initial + step * count;\nvar result = Array.from(new Array(randomExcutedCount).keys()).every(function (index) {\n    var curSalary = raiseSalaryBy100();\n    if (index + 1 >= count) return finalSalary === curSalary;\n    return curSalary === initial + step * (index + 1);\n});\nassert.equal(result, true);",
                "err": {},
                "isRoot": false,
                "uuid": "34e53aab-133b-4dfa-aa20-0a8a77c6d5a7",
                "parentUUID": "7ff0ffda-55a0-4764-b9be-467e2e20dcc9",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "4. _.partial 函数：",
            "suites": [],
            "tests": [
              {
                "title": "should pre-fill partial args and get final value",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： should pre-fill partial args and get final value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var add = function add(a, b) {\n    return a + b;\n};\nvar add5 = _main2.default.partial(add, 5);\nassert.equal(15, add5(10));",
                "err": {},
                "isRoot": false,
                "uuid": "59c203a0-bac9-462f-87b0-95f5b6ef27ec",
                "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remain un-filled when passing _ to the args",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： should remain un-filled when passing _ to the args",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var selectMin = function selectMin() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n    }\n    return Math.min.apply(null, args);\n};\nvar selectMinArgs = _main2.default.partial(selectMin, _main2.default, 4, 5);\nassert.equal(4, selectMinArgs(10));",
                "err": {},
                "isRoot": false,
                "uuid": "3a6b891b-fdd4-4293-a218-5249570b5b3b",
                "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "accepts more arguments than the number of placeholders",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： accepts more arguments than the number of placeholders",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(5, func('a', 'c', 'e'));",
                "err": {},
                "isRoot": false,
                "uuid": "d7033898-bfa1-47d2-a2f8-37c0330bdb06",
                "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cound remain arg length when some of the placeholders aren't fullfilled when calling",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： cound remain arg length when some of the placeholders aren't fullfilled when calling",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(4, func('a'));",
                "err": {},
                "isRoot": false,
                "uuid": "59e79acc-b6fd-43a6-9dbb-4691ec06475f",
                "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "unfilled placeholders are undefined",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： unfilled placeholders are undefined",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = _main2.default.partial(function () {\n    return arguments[2];\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(undefined, func('a'));",
                "err": {},
                "isRoot": false,
                "uuid": "485461e5-f69b-495e-bd21-9611e77289cd",
                "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/index.test.js",
            "uuid": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/index.test.js",
            "passes": [
              {
                "title": "should pre-fill partial args and get final value",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： should pre-fill partial args and get final value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var add = function add(a, b) {\n    return a + b;\n};\nvar add5 = _main2.default.partial(add, 5);\nassert.equal(15, add5(10));",
                "err": {},
                "isRoot": false,
                "uuid": "59c203a0-bac9-462f-87b0-95f5b6ef27ec",
                "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remain un-filled when passing _ to the args",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： should remain un-filled when passing _ to the args",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var selectMin = function selectMin() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n    }\n    return Math.min.apply(null, args);\n};\nvar selectMinArgs = _main2.default.partial(selectMin, _main2.default, 4, 5);\nassert.equal(4, selectMinArgs(10));",
                "err": {},
                "isRoot": false,
                "uuid": "3a6b891b-fdd4-4293-a218-5249570b5b3b",
                "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "accepts more arguments than the number of placeholders",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： accepts more arguments than the number of placeholders",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(5, func('a', 'c', 'e'));",
                "err": {},
                "isRoot": false,
                "uuid": "d7033898-bfa1-47d2-a2f8-37c0330bdb06",
                "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cound remain arg length when some of the placeholders aren't fullfilled when calling",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： cound remain arg length when some of the placeholders aren't fullfilled when calling",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(4, func('a'));",
                "err": {},
                "isRoot": false,
                "uuid": "59e79acc-b6fd-43a6-9dbb-4691ec06475f",
                "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "unfilled placeholders are undefined",
                "fullTitle": "underscore/Function tests:  4. _.partial 函数： unfilled placeholders are undefined",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var func = _main2.default.partial(function () {\n    return arguments[2];\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(undefined, func('a'));",
                "err": {},
                "isRoot": false,
                "uuid": "485461e5-f69b-495e-bd21-9611e77289cd",
                "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "5. _wrap函数 ",
            "suites": [],
            "tests": [
              {
                "title": "should wrap the given salutation function",
                "fullTitle": "underscore/Function tests:  5. _wrap函数  should wrap the given salutation function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nhello = _main2.default.wrap(hello, function (func) {\n    return \"before, \" + func(\"moe\") + \", after\";\n});\nassert.equal(hello(), 'before, hello: moe, after');",
                "err": {},
                "isRoot": false,
                "uuid": "1b2c9450-4e34-46d6-b246-838dfe940fa0",
                "parentUUID": "bbf2816b-69e2-47ce-b881-ecd0315fe455",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should hold fn as the first parameter of the wrapper",
                "fullTitle": "underscore/Function tests:  5. _wrap函数  should hold fn as the first parameter of the wrapper",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nvar wrappedHello = _main2.default.wrap(hello, function (func) {\n    assert.equal(hello, func);\n    return \"before, \" + func(\"moe\") + \", after\";;\n});\nwrappedHello();",
                "err": {},
                "isRoot": false,
                "uuid": "fdabdc90-0b0f-4d97-93ea-d979a43328ee",
                "parentUUID": "bbf2816b-69e2-47ce-b881-ecd0315fe455",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/index.test.js",
            "uuid": "bbf2816b-69e2-47ce-b881-ecd0315fe455",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/index.test.js",
            "passes": [
              {
                "title": "should wrap the given salutation function",
                "fullTitle": "underscore/Function tests:  5. _wrap函数  should wrap the given salutation function",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nhello = _main2.default.wrap(hello, function (func) {\n    return \"before, \" + func(\"moe\") + \", after\";\n});\nassert.equal(hello(), 'before, hello: moe, after');",
                "err": {},
                "isRoot": false,
                "uuid": "1b2c9450-4e34-46d6-b246-838dfe940fa0",
                "parentUUID": "bbf2816b-69e2-47ce-b881-ecd0315fe455",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should hold fn as the first parameter of the wrapper",
                "fullTitle": "underscore/Function tests:  5. _wrap函数  should hold fn as the first parameter of the wrapper",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nvar wrappedHello = _main2.default.wrap(hello, function (func) {\n    assert.equal(hello, func);\n    return \"before, \" + func(\"moe\") + \", after\";;\n});\nwrappedHello();",
                "err": {},
                "isRoot": false,
                "uuid": "fdabdc90-0b0f-4d97-93ea-d979a43328ee",
                "parentUUID": "bbf2816b-69e2-47ce-b881-ecd0315fe455",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "6. _memoize函数 ",
            "suites": [],
            "tests": [
              {
                "title": "should memoize the value of a fibonacci result and equal to it",
                "fullTitle": "underscore/Function tests:  6. _memoize函数  should memoize the value of a fibonacci result and equal to it",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var memoFib = _main2.default.memoize(fib);\nassert.equal(fib(10), 55);\nassert.equal(memoFib(10), 55);",
                "err": {},
                "isRoot": false,
                "uuid": "e4cf382d-ecad-47d6-afc3-94365013a569",
                "parentUUID": "e1c129c2-0165-4e79-8e47-9721df1524b1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should memoize all the result of the function",
                "fullTitle": "underscore/Function tests:  6. _memoize函数  should memoize all the result of the function",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var upper = _main2.default.memoize(function (s) {\n    return s.toUpperCase();\n});\nassert.strictEqual(upper('foo'), 'FOO');\nassert.strictEqual(upper('bar'), 'BAR');\nassert.deepEqual(upper.cache, { 'foo': 'FOO', 'bar': 'BAR' }, 'cache return all the cached value');\nassert.property(upper, 'cache');",
                "err": {},
                "isRoot": false,
                "uuid": "eae198a4-95f7-4d83-801f-4172a549c3f8",
                "parentUUID": "e1c129c2-0165-4e79-8e47-9721df1524b1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should store the hashed key as the cache key",
                "fullTitle": "underscore/Function tests:  6. _memoize函数  should store the hashed key as the cache key",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var objCacher = _main2.default.memoize(function (value, key) {\n    return { key: key, value: value };\n}, function (value, key) {\n    return key;\n});\nvar myObj = objCacher('a', 'alpha');\nvar myObjAlias = objCacher('b', 'alpha');\nassert.notStrictEqual(myObj, void 0, 'object is created if second argument used as key');\nassert.strictEqual(myObj, myObjAlias, 'object is cached if second argument used as key');\nassert.strictEqual(myObj.value, 'a', 'object is not modified if second argument used as key');",
                "err": {},
                "isRoot": false,
                "uuid": "8e43dcba-13ef-409a-9a44-1e7b2c017026",
                "parentUUID": "e1c129c2-0165-4e79-8e47-9721df1524b1",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/index.test.js",
            "uuid": "e1c129c2-0165-4e79-8e47-9721df1524b1",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/index.test.js",
            "passes": [
              {
                "title": "should memoize the value of a fibonacci result and equal to it",
                "fullTitle": "underscore/Function tests:  6. _memoize函数  should memoize the value of a fibonacci result and equal to it",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var memoFib = _main2.default.memoize(fib);\nassert.equal(fib(10), 55);\nassert.equal(memoFib(10), 55);",
                "err": {},
                "isRoot": false,
                "uuid": "e4cf382d-ecad-47d6-afc3-94365013a569",
                "parentUUID": "e1c129c2-0165-4e79-8e47-9721df1524b1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should memoize all the result of the function",
                "fullTitle": "underscore/Function tests:  6. _memoize函数  should memoize all the result of the function",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var upper = _main2.default.memoize(function (s) {\n    return s.toUpperCase();\n});\nassert.strictEqual(upper('foo'), 'FOO');\nassert.strictEqual(upper('bar'), 'BAR');\nassert.deepEqual(upper.cache, { 'foo': 'FOO', 'bar': 'BAR' }, 'cache return all the cached value');\nassert.property(upper, 'cache');",
                "err": {},
                "isRoot": false,
                "uuid": "eae198a4-95f7-4d83-801f-4172a549c3f8",
                "parentUUID": "e1c129c2-0165-4e79-8e47-9721df1524b1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should store the hashed key as the cache key",
                "fullTitle": "underscore/Function tests:  6. _memoize函数  should store the hashed key as the cache key",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var objCacher = _main2.default.memoize(function (value, key) {\n    return { key: key, value: value };\n}, function (value, key) {\n    return key;\n});\nvar myObj = objCacher('a', 'alpha');\nvar myObjAlias = objCacher('b', 'alpha');\nassert.notStrictEqual(myObj, void 0, 'object is created if second argument used as key');\nassert.strictEqual(myObj, myObjAlias, 'object is cached if second argument used as key');\nassert.strictEqual(myObj.value, 'a', 'object is not modified if second argument used as key');",
                "err": {},
                "isRoot": false,
                "uuid": "8e43dcba-13ef-409a-9a44-1e7b2c017026",
                "parentUUID": "e1c129c2-0165-4e79-8e47-9721df1524b1",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "7. _Bind 函数 ",
            "suites": [],
            "tests": [
              {
                "title": "should have correct prototype , there are two circumstances: especially when called via the new operator",
                "fullTitle": "underscore/Function tests:  7. _Bind 函数  should have correct prototype , there are two circumstances: especially when called via the new operator",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var F = function F() {\n    return this;\n};\nvar boundf = _main2.default.bind(F, { hello: 'moe curly' });\nvar Boundf = boundf; // make eslint happy.\nvar newBoundf = new Boundf();\nassert.strictEqual(newBoundf.hello, void 0, 'function should not be bound to the context, to comply with ECMAScript 5');\nassert.strictEqual(boundf().hello, 'moe curly', \"When called without the new operator, it's OK to be bound to the context\");\nassert.ok(newBoundf instanceof F, 'a bound instance is an instance of the original function');",
                "err": {},
                "isRoot": false,
                "uuid": "2e76fb33-5511-4ae1-9eb5-2add5247cfa9",
                "parentUUID": "b1f32f42-79c0-4fb8-8352-7d585b21138e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can bind a function to a context",
                "fullTitle": "underscore/Function tests:  7. _Bind 函数  can bind a function to a context",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var context = { name: 'moe' };\nvar func = function func(arg) {\n    return 'name: ' + (this.name || arg);\n};\nvar bound = _main2.default.bind(func, context);\nassert.strictEqual(bound(), 'name: moe', 'can bind a function to a context');",
                "err": {},
                "isRoot": false,
                "uuid": "434c2199-cfc9-42b8-bcdf-af43abeefae5",
                "parentUUID": "b1f32f42-79c0-4fb8-8352-7d585b21138e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can bind without specifying a context",
                "fullTitle": "underscore/Function tests:  7. _Bind 函数  can bind without specifying a context",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var func = function func(arg) {\n    return 'name: ' + (this.name || arg);\n};\nvar bound = _main2.default.bind(func, null, 'curly');\nvar result = bound();\n// Work around a PhantomJS bug when applying a function with null|undefined.\nassert.ok(result === 'name: curly' || result === 'name: ' + window.name, 'can bind without specifying a context');",
                "err": {
                  "estack": "TypeError: Cannot read property 'name' of null\n    at func (test/main.test.js:183:36)\n    at Context.<anonymous> (test/main.test.js:187:26)"
                },
                "isRoot": false,
                "uuid": "95c95576-5260-4607-9441-814b8604ce6e",
                "parentUUID": "b1f32f42-79c0-4fb8-8352-7d585b21138e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can be bound to any value",
                "fullTitle": "underscore/Function tests:  7. _Bind 函数  can be bound to any value",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var func = function func(salutation, firstname, lastname) {\n    return salutation + ': ' + firstname + ' ' + lastname;\n};\nfunc = _main2.default.bind(func, this, 'hello', 'moe', 'curly');\nassert.strictEqual(func(), 'hello: moe curly', 'the function was partially applied in advance and can accept multiple arguments');\nfunc = function func() {\n    return this;\n};\nassert.strictEqual(_typeof(_main2.default.bind(func, 0)()), 'object', 'binding a primitive to `this` returns a wrapped primitive');\nassert.strictEqual(_main2.default.bind(func, 0)().valueOf(), 0, 'can bind a function to `0`');\nassert.strictEqual(_main2.default.bind(func, '')().valueOf(), '', 'can bind a function to an empty string');\nassert.strictEqual(_main2.default.bind(func, false)().valueOf(), false, 'can bind a function to `false`');",
                "err": {
                  "name": "AssertionError",
                  "message": "binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'",
                  "showDiff": true,
                  "actual": "number",
                  "expected": "object",
                  "estack": "AssertionError: binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'\n    at Function.assert.strictEqual (node_modules/chai/lib/chai/interface/assert.js:178:32)\n    at Context.<anonymous> (test/main.test.js:201:20)",
                  "diff": "- number\n+ object\n",
                  "stack": "AssertionError: binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'\n    at Function.assert.strictEqual (node_modules/chai/lib/chai/interface/assert.js:178:32)\n    at Context.<anonymous> (test/main.test.js:201:20)"
                },
                "isRoot": false,
                "uuid": "528df25a-e5bc-4430-8d8e-8dbc399a67db",
                "parentUUID": "b1f32f42-79c0-4fb8-8352-7d585b21138e",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/index.test.js",
            "uuid": "b1f32f42-79c0-4fb8-8352-7d585b21138e",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/index.test.js",
            "passes": [
              {
                "title": "should have correct prototype , there are two circumstances: especially when called via the new operator",
                "fullTitle": "underscore/Function tests:  7. _Bind 函数  should have correct prototype , there are two circumstances: especially when called via the new operator",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var F = function F() {\n    return this;\n};\nvar boundf = _main2.default.bind(F, { hello: 'moe curly' });\nvar Boundf = boundf; // make eslint happy.\nvar newBoundf = new Boundf();\nassert.strictEqual(newBoundf.hello, void 0, 'function should not be bound to the context, to comply with ECMAScript 5');\nassert.strictEqual(boundf().hello, 'moe curly', \"When called without the new operator, it's OK to be bound to the context\");\nassert.ok(newBoundf instanceof F, 'a bound instance is an instance of the original function');",
                "err": {},
                "isRoot": false,
                "uuid": "2e76fb33-5511-4ae1-9eb5-2add5247cfa9",
                "parentUUID": "b1f32f42-79c0-4fb8-8352-7d585b21138e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can bind a function to a context",
                "fullTitle": "underscore/Function tests:  7. _Bind 函数  can bind a function to a context",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var context = { name: 'moe' };\nvar func = function func(arg) {\n    return 'name: ' + (this.name || arg);\n};\nvar bound = _main2.default.bind(func, context);\nassert.strictEqual(bound(), 'name: moe', 'can bind a function to a context');",
                "err": {},
                "isRoot": false,
                "uuid": "434c2199-cfc9-42b8-bcdf-af43abeefae5",
                "parentUUID": "b1f32f42-79c0-4fb8-8352-7d585b21138e",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [
              {
                "title": "can bind without specifying a context",
                "fullTitle": "underscore/Function tests:  7. _Bind 函数  can bind without specifying a context",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var func = function func(arg) {\n    return 'name: ' + (this.name || arg);\n};\nvar bound = _main2.default.bind(func, null, 'curly');\nvar result = bound();\n// Work around a PhantomJS bug when applying a function with null|undefined.\nassert.ok(result === 'name: curly' || result === 'name: ' + window.name, 'can bind without specifying a context');",
                "err": {
                  "estack": "TypeError: Cannot read property 'name' of null\n    at func (test/main.test.js:183:36)\n    at Context.<anonymous> (test/main.test.js:187:26)"
                },
                "isRoot": false,
                "uuid": "95c95576-5260-4607-9441-814b8604ce6e",
                "parentUUID": "b1f32f42-79c0-4fb8-8352-7d585b21138e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can be bound to any value",
                "fullTitle": "underscore/Function tests:  7. _Bind 函数  can be bound to any value",
                "timedOut": false,
                "duration": 1,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "var func = function func(salutation, firstname, lastname) {\n    return salutation + ': ' + firstname + ' ' + lastname;\n};\nfunc = _main2.default.bind(func, this, 'hello', 'moe', 'curly');\nassert.strictEqual(func(), 'hello: moe curly', 'the function was partially applied in advance and can accept multiple arguments');\nfunc = function func() {\n    return this;\n};\nassert.strictEqual(_typeof(_main2.default.bind(func, 0)()), 'object', 'binding a primitive to `this` returns a wrapped primitive');\nassert.strictEqual(_main2.default.bind(func, 0)().valueOf(), 0, 'can bind a function to `0`');\nassert.strictEqual(_main2.default.bind(func, '')().valueOf(), '', 'can bind a function to an empty string');\nassert.strictEqual(_main2.default.bind(func, false)().valueOf(), false, 'can bind a function to `false`');",
                "err": {
                  "name": "AssertionError",
                  "message": "binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'",
                  "showDiff": true,
                  "actual": "number",
                  "expected": "object",
                  "estack": "AssertionError: binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'\n    at Function.assert.strictEqual (node_modules/chai/lib/chai/interface/assert.js:178:32)\n    at Context.<anonymous> (test/main.test.js:201:20)",
                  "diff": "- number\n+ object\n",
                  "stack": "AssertionError: binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'\n    at Function.assert.strictEqual (node_modules/chai/lib/chai/interface/assert.js:178:32)\n    at Context.<anonymous> (test/main.test.js:201:20)"
                },
                "isRoot": false,
                "uuid": "528df25a-e5bc-4430-8d8e-8dbc399a67db",
                "parentUUID": "b1f32f42-79c0-4fb8-8352-7d585b21138e",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 2,
            "totalFailures": 2,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          },
          {
            "title": "8. _BindAll 函数 ",
            "suites": [],
            "tests": [
              {
                "title": "should meet the basic requirements of the bind",
                "fullTitle": "underscore/Function tests:  8. _BindAll 函数  should meet the basic requirements of the bind",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var curly = { name: 'curly' };\nvar moe = {\n    name: 'moe',\n    getName: function getName() {\n        return 'name: ' + this.name;\n    },\n    sayHi: function sayHi() {\n        return 'hi: ' + this.name;\n    }\n};\ncurly.getName = moe.getName;\n_main2.default.bindAll(moe, 'getName', 'sayHi');\ncurly.sayHi = moe.sayHi;\nassert.strictEqual(curly.getName(), 'name: curly', 'unbound function is bound to current object');\nassert.strictEqual(curly.sayHi(), 'hi: moe', 'bound function is still bound to original object');",
                "err": {},
                "isRoot": false,
                "uuid": "42a860cf-4cd8-4a08-9c5e-5b9752cd9e8a",
                "parentUUID": "41beb715-75e8-4204-8972-00158f331b1e",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/index.test.js",
            "uuid": "41beb715-75e8-4204-8972-00158f331b1e",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/index.test.js",
            "passes": [
              {
                "title": "should meet the basic requirements of the bind",
                "fullTitle": "underscore/Function tests:  8. _BindAll 函数  should meet the basic requirements of the bind",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var curly = { name: 'curly' };\nvar moe = {\n    name: 'moe',\n    getName: function getName() {\n        return 'name: ' + this.name;\n    },\n    sayHi: function sayHi() {\n        return 'hi: ' + this.name;\n    }\n};\ncurly.getName = moe.getName;\n_main2.default.bindAll(moe, 'getName', 'sayHi');\ncurly.sayHi = moe.sayHi;\nassert.strictEqual(curly.getName(), 'name: curly', 'unbound function is bound to current object');\nassert.strictEqual(curly.sayHi(), 'hi: moe', 'bound function is still bound to original object');",
                "err": {},
                "isRoot": false,
                "uuid": "42a860cf-4cd8-4a08-9c5e-5b9752cd9e8a",
                "parentUUID": "41beb715-75e8-4204-8972-00158f331b1e",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/index.test.js",
        "uuid": "3e0d65c2-98ce-4995-b1df-828f744776db",
        "failedHooks": [],
        "fullFile": "/Users/luchen/Documents/study/test/underscore/test/index.test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasFailedHooks": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "underscore/Function tests: ",
        "suites": [
          {
            "title": "1. _.shuffle 函数：",
            "suites": [],
            "tests": [
              {
                "title": "should shuffle an obj or an array with equal possibilities ",
                "fullTitle": "underscore/Function tests:  1. _.shuffle 函数： should shuffle an obj or an array with equal possibilities ",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.deepEqual(_Collection2.default.shuffle([1]), [1], 'behaves correctly on size 1 arrays');\n            var numbers = _Collection2.default.range(20);\n            var shuffled = _Collection2.default.shuffle(numbers);\n            assert.notDeepEqual(numbers, shuffled, 'does change the order'); // Chance of false negative: 1 in ~2.4*10^18\n            assert.notStrictEqual(numbers, shuffled, 'original object is unmodified');\n            // assert.deepEqual(numbers, shuffled, 'contains the same members before and after shuffle');\n            shuffled = _Collection2.default.shuffle({ a: 1, b: 2, c: 3, d: 4 });\n            assert.strictEqual(shuffled.length, 4);\n            assert.deepEqual(shuffled.sort(), [1, 2, 3, 4], 'works on objects');",
                "err": {},
                "isRoot": false,
                "uuid": "7a1f853c-6c30-4d91-a045-430baf1ac450",
                "parentUUID": "06952709-18ed-4161-abbd-1c7981c70e25",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/index.test.js",
            "uuid": "06952709-18ed-4161-abbd-1c7981c70e25",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/index.test.js",
            "passes": [
              {
                "title": "should shuffle an obj or an array with equal possibilities ",
                "fullTitle": "underscore/Function tests:  1. _.shuffle 函数： should shuffle an obj or an array with equal possibilities ",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "assert.deepEqual(_Collection2.default.shuffle([1]), [1], 'behaves correctly on size 1 arrays');\n            var numbers = _Collection2.default.range(20);\n            var shuffled = _Collection2.default.shuffle(numbers);\n            assert.notDeepEqual(numbers, shuffled, 'does change the order'); // Chance of false negative: 1 in ~2.4*10^18\n            assert.notStrictEqual(numbers, shuffled, 'original object is unmodified');\n            // assert.deepEqual(numbers, shuffled, 'contains the same members before and after shuffle');\n            shuffled = _Collection2.default.shuffle({ a: 1, b: 2, c: 3, d: 4 });\n            assert.strictEqual(shuffled.length, 4);\n            assert.deepEqual(shuffled.sort(), [1, 2, 3, 4], 'works on objects');",
                "err": {},
                "isRoot": false,
                "uuid": "7a1f853c-6c30-4d91-a045-430baf1ac450",
                "parentUUID": "06952709-18ed-4161-abbd-1c7981c70e25",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/index.test.js",
        "uuid": "c5c4ace7-f682-4c3a-81f2-efe49bc92030",
        "failedHooks": [],
        "fullFile": "/Users/luchen/Documents/study/test/underscore/test/index.test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasFailedHooks": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "underscore/Function tests: ",
        "suites": [
          {
            "title": "2. _.each 函数：",
            "suites": [
              {
                "title": "cound only iterate the owned key-value of the list, ignore those in the prototype",
                "suites": [],
                "tests": [
                  {
                    "title": "cound only iterate the owned key-value of the list, ignore those in the prototype",
                    "fullTitle": "2. _.each 函数： cound only iterate the owned key-value of the list, ignore those in the prototype cound only iterate the owned key-value of the list, ignore those in the prototype",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "_Collection2.default.each(obj, function (value, key) {\n    answers.push(key);\n});\nassert.deepEqual(answers, ['one', 'two', 'three'], 'iterating over objects works, and ignores the object prototype.');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "87bffbe0-b39f-44ea-ba1d-28cb7b4d179f",
                    "parentUUID": "211c7525-73da-4779-b1d5-857a6c6d5548",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 2000,
                "file": "/test/index.test.js",
                "uuid": "211c7525-73da-4779-b1d5-857a6c6d5548",
                "failedHooks": [],
                "fullFile": "/Users/luchen/Documents/study/test/underscore/test/index.test.js",
                "passes": [
                  {
                    "title": "cound only iterate the owned key-value of the list, ignore those in the prototype",
                    "fullTitle": "2. _.each 函数： cound only iterate the owned key-value of the list, ignore those in the prototype cound only iterate the owned key-value of the list, ignore those in the prototype",
                    "timedOut": false,
                    "duration": 0,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "_Collection2.default.each(obj, function (value, key) {\n    answers.push(key);\n});\nassert.deepEqual(answers, ['one', 'two', 'three'], 'iterating over objects works, and ignores the object prototype.');",
                    "err": {},
                    "isRoot": false,
                    "uuid": "87bffbe0-b39f-44ea-ba1d-28cb7b4d179f",
                    "parentUUID": "211c7525-73da-4779-b1d5-857a6c6d5548",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasFailedHooks": false,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 0,
                "rootEmpty": false
              }
            ],
            "tests": [
              {
                "title": "each iterators provide value and iteration count",
                "fullTitle": "underscore/Function tests:  2. _.each 函数： each iterators provide value and iteration count",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_Collection2.default.each([1, 2, 3], function (num, i) {\n                assert.strictEqual(num, i + 1, 'each iterators provide value and iteration count');\n            });\n            // const answers = [];\n            // _.each([1, 2, 3], function(num) { answers.push(num); });\n            // assert.deepEqual(answers, [1, 2, 3], 'can iterate a simple array');\n            // let count = 0;\n            // const obj = { 1: 'foo', 2: 'bar', 3: 'baz' };\n            // _.each(obj, function() { count++; console.log(count)});\n            // assert.strictEqual(3, count, 'the fun should be called only 3 times');",
                "err": {},
                "isRoot": false,
                "uuid": "0ff951e4-0699-4020-9e7b-964799628f59",
                "parentUUID": "755aef08-1eaf-4f93-9fd0-d6f44d5a478f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cound access the original list",
                "fullTitle": "underscore/Function tests:  2. _.each 函数： cound access the original list",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var answer = null;\n_Collection2.default.each([1, 2, 3], function (num, index, arr) {\n    if (arr.includes(num)) answer = true;\n});\nassert.ok(answer, 'can reference the original collection from inside the iterator');",
                "err": {},
                "isRoot": false,
                "uuid": "5774ea5d-2ff7-4dd2-9a12-42c1c005b3f6",
                "parentUUID": "755aef08-1eaf-4f93-9fd0-d6f44d5a478f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cound access the context obj",
                "fullTitle": "underscore/Function tests:  2. _.each 函数： cound access the context obj",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var answers = [];\n            _Collection2.default.each([1, 2, 3], function (num) {\n                answers.push(num * this.multiplier);\n            }, { multiplier: 5 });\n            assert.deepEqual(answers, [5, 10, 15], 'context object property accessed');\n            // ensure the each function is JITed\n            // _(1000).times(function() { _.each([], function() {}); });",
                "err": {},
                "isRoot": false,
                "uuid": "aff2da49-3589-4594-8b29-2edab5599cb4",
                "parentUUID": "755aef08-1eaf-4f93-9fd0-d6f44d5a478f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cound handle other types of list,such as false,null",
                "fullTitle": "underscore/Function tests:  2. _.each 函数： cound handle other types of list,such as false,null",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var answers = 0;\n            _Collection2.default.each(null, function () {\n                ++answers;\n            });\n            assert.strictEqual(answers, 0, 'handles a null properly');\n            _Collection2.default.each(false, function () {});\n            var a = [1, 2, 3];\n            assert.strictEqual(_Collection2.default.each(a, function () {}), a);\n            assert.strictEqual(_Collection2.default.each(null, function () {}), null);\n            a = 'test';\n            _Collection2.default.each(a, function (v, i) {\n                assert.strictEqual(v, a[i]);\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "c171f6e1-cc25-453e-b2bd-698d18f80e31",
                "parentUUID": "755aef08-1eaf-4f93-9fd0-d6f44d5a478f",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/index.test.js",
            "uuid": "755aef08-1eaf-4f93-9fd0-d6f44d5a478f",
            "failedHooks": [],
            "fullFile": "/Users/luchen/Documents/study/test/underscore/test/index.test.js",
            "passes": [
              {
                "title": "each iterators provide value and iteration count",
                "fullTitle": "underscore/Function tests:  2. _.each 函数： each iterators provide value and iteration count",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "_Collection2.default.each([1, 2, 3], function (num, i) {\n                assert.strictEqual(num, i + 1, 'each iterators provide value and iteration count');\n            });\n            // const answers = [];\n            // _.each([1, 2, 3], function(num) { answers.push(num); });\n            // assert.deepEqual(answers, [1, 2, 3], 'can iterate a simple array');\n            // let count = 0;\n            // const obj = { 1: 'foo', 2: 'bar', 3: 'baz' };\n            // _.each(obj, function() { count++; console.log(count)});\n            // assert.strictEqual(3, count, 'the fun should be called only 3 times');",
                "err": {},
                "isRoot": false,
                "uuid": "0ff951e4-0699-4020-9e7b-964799628f59",
                "parentUUID": "755aef08-1eaf-4f93-9fd0-d6f44d5a478f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cound access the original list",
                "fullTitle": "underscore/Function tests:  2. _.each 函数： cound access the original list",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var answer = null;\n_Collection2.default.each([1, 2, 3], function (num, index, arr) {\n    if (arr.includes(num)) answer = true;\n});\nassert.ok(answer, 'can reference the original collection from inside the iterator');",
                "err": {},
                "isRoot": false,
                "uuid": "5774ea5d-2ff7-4dd2-9a12-42c1c005b3f6",
                "parentUUID": "755aef08-1eaf-4f93-9fd0-d6f44d5a478f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cound access the context obj",
                "fullTitle": "underscore/Function tests:  2. _.each 函数： cound access the context obj",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var answers = [];\n            _Collection2.default.each([1, 2, 3], function (num) {\n                answers.push(num * this.multiplier);\n            }, { multiplier: 5 });\n            assert.deepEqual(answers, [5, 10, 15], 'context object property accessed');\n            // ensure the each function is JITed\n            // _(1000).times(function() { _.each([], function() {}); });",
                "err": {},
                "isRoot": false,
                "uuid": "aff2da49-3589-4594-8b29-2edab5599cb4",
                "parentUUID": "755aef08-1eaf-4f93-9fd0-d6f44d5a478f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cound handle other types of list,such as false,null",
                "fullTitle": "underscore/Function tests:  2. _.each 函数： cound handle other types of list,such as false,null",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "var answers = 0;\n            _Collection2.default.each(null, function () {\n                ++answers;\n            });\n            assert.strictEqual(answers, 0, 'handles a null properly');\n            _Collection2.default.each(false, function () {});\n            var a = [1, 2, 3];\n            assert.strictEqual(_Collection2.default.each(a, function () {}), a);\n            assert.strictEqual(_Collection2.default.each(null, function () {}), null);\n            a = 'test';\n            _Collection2.default.each(a, function (v, i) {\n                assert.strictEqual(v, a[i]);\n            });",
                "err": {},
                "isRoot": false,
                "uuid": "c171f6e1-cc25-453e-b2bd-698d18f80e31",
                "parentUUID": "755aef08-1eaf-4f93-9fd0-d6f44d5a478f",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasFailedHooks": false,
            "hasSuites": true,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/index.test.js",
        "uuid": "5f0f7458-467e-421b-b417-226d3425b20d",
        "failedHooks": [],
        "fullFile": "/Users/luchen/Documents/study/test/underscore/test/index.test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasFailedHooks": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "2e34d287-ff48-424b-bf0a-b1c49cf2570c",
    "failedHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasFailedHooks": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should return a function ",
      "fullTitle": "1. _.componse 函数： should return a function ",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var componsedFun = _main2.default.compose(new Function(), new Function());\nassert.equal(true, (0, _util.isTypeof)('Function')(componsedFun));",
      "err": {},
      "isRoot": false,
      "uuid": "82565356-6b2e-4e62-9049-557806e3e0fe",
      "parentUUID": "77b7c14b-564d-4959-ad61-881d56887afc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should passing returned value to next functions",
      "fullTitle": "1. _.componse 函数： should passing returned value to next functions",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var greet = function greet(name) {\n                assert.equal(name, 'MOE!');\n            };",
      "err": {},
      "isRoot": false,
      "uuid": "90dcef99-de3c-4b10-8134-dd02265630b6",
      "parentUUID": "77b7c14b-564d-4959-ad61-881d56887afc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should chain functions and passing values to finally get the result",
      "fullTitle": "1. _.componse 函数： should chain functions and passing values to finally get the result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var greet = function greet(name) {\n                return 'hi ' + name;\n            };\n            var welcome = _main2.default.compose(greet, exclaim);\n            assert.equal('hi MOE!', welcome('moe'));",
      "err": {},
      "isRoot": false,
      "uuid": "abe6682f-6065-4fdf-b53a-a9a7672fd72e",
      "parentUUID": "77b7c14b-564d-4959-ad61-881d56887afc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be excuted until all have excuted ",
      "fullTitle": "2. _.after 函数： should be excuted until all have excuted ",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var _this = this;\nvar count = 0;\nvar render = function render() {\n    // console.log('---done!---')\n    assert.equal(count, notes.length);\n    done();\n};\nvar renderNotes = _main2.default.after(notes.length, render);\nnotes.forEach(function (note) {\n    var fn = function (note) {\n        count++;\n        // console.log('  note  ',note);\n        renderNotes();\n    }.bind(_this, note);\n    (0, _util.asyncFunction)(fn);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "bd1a48b3-cb02-46b9-912a-3f9f7dfa3393",
      "parentUUID": "5aa2c644-7f3b-40e5-9e85-a30d6afca606",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the same result after count",
      "fullTitle": "3. _.before 函数： should return the same result after count",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var initial = 1000,\n    step = 100;\nvar askForRaise = function (initial, step) {\n    var salary = initial;\n    return function () {\n        salary += step;\n        return salary;\n    };\n}(initial, step);\nvar raiseSalaryBy100 = _main2.default.before(count, askForRaise);\nvar randomExcutedCount = count + Math.floor(Math.random() * 100),\n    finalSalary = initial + step * count;\nvar result = Array.from(new Array(randomExcutedCount).keys()).every(function (index) {\n    var curSalary = raiseSalaryBy100();\n    if (index + 1 >= count) return finalSalary === curSalary;\n    return curSalary === initial + step * (index + 1);\n});\nassert.equal(result, true);",
      "err": {},
      "isRoot": false,
      "uuid": "34e53aab-133b-4dfa-aa20-0a8a77c6d5a7",
      "parentUUID": "7ff0ffda-55a0-4764-b9be-467e2e20dcc9",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should pre-fill partial args and get final value",
      "fullTitle": "4. _.partial 函数： should pre-fill partial args and get final value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var add = function add(a, b) {\n    return a + b;\n};\nvar add5 = _main2.default.partial(add, 5);\nassert.equal(15, add5(10));",
      "err": {},
      "isRoot": false,
      "uuid": "59c203a0-bac9-462f-87b0-95f5b6ef27ec",
      "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should remain un-filled when passing _ to the args",
      "fullTitle": "4. _.partial 函数： should remain un-filled when passing _ to the args",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var selectMin = function selectMin() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n    }\n    return Math.min.apply(null, args);\n};\nvar selectMinArgs = _main2.default.partial(selectMin, _main2.default, 4, 5);\nassert.equal(4, selectMinArgs(10));",
      "err": {},
      "isRoot": false,
      "uuid": "3a6b891b-fdd4-4293-a218-5249570b5b3b",
      "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "accepts more arguments than the number of placeholders",
      "fullTitle": "4. _.partial 函数： accepts more arguments than the number of placeholders",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(5, func('a', 'c', 'e'));",
      "err": {},
      "isRoot": false,
      "uuid": "d7033898-bfa1-47d2-a2f8-37c0330bdb06",
      "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "cound remain arg length when some of the placeholders aren't fullfilled when calling",
      "fullTitle": "4. _.partial 函数： cound remain arg length when some of the placeholders aren't fullfilled when calling",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(4, func('a'));",
      "err": {},
      "isRoot": false,
      "uuid": "59e79acc-b6fd-43a6-9dbb-4691ec06475f",
      "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "unfilled placeholders are undefined",
      "fullTitle": "4. _.partial 函数： unfilled placeholders are undefined",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var func = _main2.default.partial(function () {\n    return arguments[2];\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(undefined, func('a'));",
      "err": {},
      "isRoot": false,
      "uuid": "485461e5-f69b-495e-bd21-9611e77289cd",
      "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should wrap the given salutation function",
      "fullTitle": "5. _wrap函数  should wrap the given salutation function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nhello = _main2.default.wrap(hello, function (func) {\n    return \"before, \" + func(\"moe\") + \", after\";\n});\nassert.equal(hello(), 'before, hello: moe, after');",
      "err": {},
      "isRoot": false,
      "uuid": "1b2c9450-4e34-46d6-b246-838dfe940fa0",
      "parentUUID": "bbf2816b-69e2-47ce-b881-ecd0315fe455",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should hold fn as the first parameter of the wrapper",
      "fullTitle": "5. _wrap函数  should hold fn as the first parameter of the wrapper",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nvar wrappedHello = _main2.default.wrap(hello, function (func) {\n    assert.equal(hello, func);\n    return \"before, \" + func(\"moe\") + \", after\";;\n});\nwrappedHello();",
      "err": {},
      "isRoot": false,
      "uuid": "fdabdc90-0b0f-4d97-93ea-d979a43328ee",
      "parentUUID": "bbf2816b-69e2-47ce-b881-ecd0315fe455",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should memoize the value of a fibonacci result and equal to it",
      "fullTitle": "6. _memoize函数  should memoize the value of a fibonacci result and equal to it",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var memoFib = _main2.default.memoize(fib);\nassert.equal(fib(10), 55);\nassert.equal(memoFib(10), 55);",
      "err": {},
      "isRoot": false,
      "uuid": "e4cf382d-ecad-47d6-afc3-94365013a569",
      "parentUUID": "e1c129c2-0165-4e79-8e47-9721df1524b1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should memoize all the result of the function",
      "fullTitle": "6. _memoize函数  should memoize all the result of the function",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var upper = _main2.default.memoize(function (s) {\n    return s.toUpperCase();\n});\nassert.strictEqual(upper('foo'), 'FOO');\nassert.strictEqual(upper('bar'), 'BAR');\nassert.deepEqual(upper.cache, { 'foo': 'FOO', 'bar': 'BAR' }, 'cache return all the cached value');\nassert.property(upper, 'cache');",
      "err": {},
      "isRoot": false,
      "uuid": "eae198a4-95f7-4d83-801f-4172a549c3f8",
      "parentUUID": "e1c129c2-0165-4e79-8e47-9721df1524b1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should store the hashed key as the cache key",
      "fullTitle": "6. _memoize函数  should store the hashed key as the cache key",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var objCacher = _main2.default.memoize(function (value, key) {\n    return { key: key, value: value };\n}, function (value, key) {\n    return key;\n});\nvar myObj = objCacher('a', 'alpha');\nvar myObjAlias = objCacher('b', 'alpha');\nassert.notStrictEqual(myObj, void 0, 'object is created if second argument used as key');\nassert.strictEqual(myObj, myObjAlias, 'object is cached if second argument used as key');\nassert.strictEqual(myObj.value, 'a', 'object is not modified if second argument used as key');",
      "err": {},
      "isRoot": false,
      "uuid": "8e43dcba-13ef-409a-9a44-1e7b2c017026",
      "parentUUID": "e1c129c2-0165-4e79-8e47-9721df1524b1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should have correct prototype , there are two circumstances: especially when called via the new operator",
      "fullTitle": "7. _Bind 函数  should have correct prototype , there are two circumstances: especially when called via the new operator",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var F = function F() {\n    return this;\n};\nvar boundf = _main2.default.bind(F, { hello: 'moe curly' });\nvar Boundf = boundf; // make eslint happy.\nvar newBoundf = new Boundf();\nassert.strictEqual(newBoundf.hello, void 0, 'function should not be bound to the context, to comply with ECMAScript 5');\nassert.strictEqual(boundf().hello, 'moe curly', \"When called without the new operator, it's OK to be bound to the context\");\nassert.ok(newBoundf instanceof F, 'a bound instance is an instance of the original function');",
      "err": {},
      "isRoot": false,
      "uuid": "2e76fb33-5511-4ae1-9eb5-2add5247cfa9",
      "parentUUID": "b1f32f42-79c0-4fb8-8352-7d585b21138e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "can bind a function to a context",
      "fullTitle": "7. _Bind 函数  can bind a function to a context",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var context = { name: 'moe' };\nvar func = function func(arg) {\n    return 'name: ' + (this.name || arg);\n};\nvar bound = _main2.default.bind(func, context);\nassert.strictEqual(bound(), 'name: moe', 'can bind a function to a context');",
      "err": {},
      "isRoot": false,
      "uuid": "434c2199-cfc9-42b8-bcdf-af43abeefae5",
      "parentUUID": "b1f32f42-79c0-4fb8-8352-7d585b21138e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "can bind without specifying a context",
      "fullTitle": "7. _Bind 函数  can bind without specifying a context",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "var func = function func(arg) {\n    return 'name: ' + (this.name || arg);\n};\nvar bound = _main2.default.bind(func, null, 'curly');\nvar result = bound();\n// Work around a PhantomJS bug when applying a function with null|undefined.\nassert.ok(result === 'name: curly' || result === 'name: ' + window.name, 'can bind without specifying a context');",
      "err": {
        "estack": "TypeError: Cannot read property 'name' of null\n    at func (test/main.test.js:183:36)\n    at Context.<anonymous> (test/main.test.js:187:26)"
      },
      "isRoot": false,
      "uuid": "95c95576-5260-4607-9441-814b8604ce6e",
      "parentUUID": "b1f32f42-79c0-4fb8-8352-7d585b21138e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "can be bound to any value",
      "fullTitle": "7. _Bind 函数  can be bound to any value",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "var func = function func(salutation, firstname, lastname) {\n    return salutation + ': ' + firstname + ' ' + lastname;\n};\nfunc = _main2.default.bind(func, this, 'hello', 'moe', 'curly');\nassert.strictEqual(func(), 'hello: moe curly', 'the function was partially applied in advance and can accept multiple arguments');\nfunc = function func() {\n    return this;\n};\nassert.strictEqual(_typeof(_main2.default.bind(func, 0)()), 'object', 'binding a primitive to `this` returns a wrapped primitive');\nassert.strictEqual(_main2.default.bind(func, 0)().valueOf(), 0, 'can bind a function to `0`');\nassert.strictEqual(_main2.default.bind(func, '')().valueOf(), '', 'can bind a function to an empty string');\nassert.strictEqual(_main2.default.bind(func, false)().valueOf(), false, 'can bind a function to `false`');",
      "err": {
        "name": "AssertionError",
        "message": "binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'",
        "showDiff": true,
        "actual": "number",
        "expected": "object",
        "estack": "AssertionError: binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'\n    at Function.assert.strictEqual (node_modules/chai/lib/chai/interface/assert.js:178:32)\n    at Context.<anonymous> (test/main.test.js:201:20)",
        "diff": "- number\n+ object\n",
        "stack": "AssertionError: binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'\n    at Function.assert.strictEqual (node_modules/chai/lib/chai/interface/assert.js:178:32)\n    at Context.<anonymous> (test/main.test.js:201:20)"
      },
      "isRoot": false,
      "uuid": "528df25a-e5bc-4430-8d8e-8dbc399a67db",
      "parentUUID": "b1f32f42-79c0-4fb8-8352-7d585b21138e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should meet the basic requirements of the bind",
      "fullTitle": "8. _BindAll 函数  should meet the basic requirements of the bind",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var curly = { name: 'curly' };\nvar moe = {\n    name: 'moe',\n    getName: function getName() {\n        return 'name: ' + this.name;\n    },\n    sayHi: function sayHi() {\n        return 'hi: ' + this.name;\n    }\n};\ncurly.getName = moe.getName;\n_main2.default.bindAll(moe, 'getName', 'sayHi');\ncurly.sayHi = moe.sayHi;\nassert.strictEqual(curly.getName(), 'name: curly', 'unbound function is bound to current object');\nassert.strictEqual(curly.sayHi(), 'hi: moe', 'bound function is still bound to original object');",
      "err": {},
      "isRoot": false,
      "uuid": "42a860cf-4cd8-4a08-9c5e-5b9752cd9e8a",
      "parentUUID": "41beb715-75e8-4204-8972-00158f331b1e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should shuffle an obj or an array with equal possibilities ",
      "fullTitle": "1. _.shuffle 函数： should shuffle an obj or an array with equal possibilities ",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.deepEqual(_Collection2.default.shuffle([1]), [1], 'behaves correctly on size 1 arrays');\n            var numbers = _Collection2.default.range(20);\n            var shuffled = _Collection2.default.shuffle(numbers);\n            assert.notDeepEqual(numbers, shuffled, 'does change the order'); // Chance of false negative: 1 in ~2.4*10^18\n            assert.notStrictEqual(numbers, shuffled, 'original object is unmodified');\n            // assert.deepEqual(numbers, shuffled, 'contains the same members before and after shuffle');\n            shuffled = _Collection2.default.shuffle({ a: 1, b: 2, c: 3, d: 4 });\n            assert.strictEqual(shuffled.length, 4);\n            assert.deepEqual(shuffled.sort(), [1, 2, 3, 4], 'works on objects');",
      "err": {},
      "isRoot": false,
      "uuid": "7a1f853c-6c30-4d91-a045-430baf1ac450",
      "parentUUID": "06952709-18ed-4161-abbd-1c7981c70e25",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "each iterators provide value and iteration count",
      "fullTitle": "2. _.each 函数： each iterators provide value and iteration count",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "_Collection2.default.each([1, 2, 3], function (num, i) {\n                assert.strictEqual(num, i + 1, 'each iterators provide value and iteration count');\n            });\n            // const answers = [];\n            // _.each([1, 2, 3], function(num) { answers.push(num); });\n            // assert.deepEqual(answers, [1, 2, 3], 'can iterate a simple array');\n            // let count = 0;\n            // const obj = { 1: 'foo', 2: 'bar', 3: 'baz' };\n            // _.each(obj, function() { count++; console.log(count)});\n            // assert.strictEqual(3, count, 'the fun should be called only 3 times');",
      "err": {},
      "isRoot": false,
      "uuid": "0ff951e4-0699-4020-9e7b-964799628f59",
      "parentUUID": "755aef08-1eaf-4f93-9fd0-d6f44d5a478f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "cound access the original list",
      "fullTitle": "2. _.each 函数： cound access the original list",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var answer = null;\n_Collection2.default.each([1, 2, 3], function (num, index, arr) {\n    if (arr.includes(num)) answer = true;\n});\nassert.ok(answer, 'can reference the original collection from inside the iterator');",
      "err": {},
      "isRoot": false,
      "uuid": "5774ea5d-2ff7-4dd2-9a12-42c1c005b3f6",
      "parentUUID": "755aef08-1eaf-4f93-9fd0-d6f44d5a478f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "cound access the context obj",
      "fullTitle": "2. _.each 函数： cound access the context obj",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var answers = [];\n            _Collection2.default.each([1, 2, 3], function (num) {\n                answers.push(num * this.multiplier);\n            }, { multiplier: 5 });\n            assert.deepEqual(answers, [5, 10, 15], 'context object property accessed');\n            // ensure the each function is JITed\n            // _(1000).times(function() { _.each([], function() {}); });",
      "err": {},
      "isRoot": false,
      "uuid": "aff2da49-3589-4594-8b29-2edab5599cb4",
      "parentUUID": "755aef08-1eaf-4f93-9fd0-d6f44d5a478f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "cound handle other types of list,such as false,null",
      "fullTitle": "2. _.each 函数： cound handle other types of list,such as false,null",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var answers = 0;\n            _Collection2.default.each(null, function () {\n                ++answers;\n            });\n            assert.strictEqual(answers, 0, 'handles a null properly');\n            _Collection2.default.each(false, function () {});\n            var a = [1, 2, 3];\n            assert.strictEqual(_Collection2.default.each(a, function () {}), a);\n            assert.strictEqual(_Collection2.default.each(null, function () {}), null);\n            a = 'test';\n            _Collection2.default.each(a, function (v, i) {\n                assert.strictEqual(v, a[i]);\n            });",
      "err": {},
      "isRoot": false,
      "uuid": "c171f6e1-cc25-453e-b2bd-698d18f80e31",
      "parentUUID": "755aef08-1eaf-4f93-9fd0-d6f44d5a478f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "cound only iterate the owned key-value of the list, ignore those in the prototype",
      "fullTitle": "cound only iterate the owned key-value of the list, ignore those in the prototype cound only iterate the owned key-value of the list, ignore those in the prototype",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "_Collection2.default.each(obj, function (value, key) {\n    answers.push(key);\n});\nassert.deepEqual(answers, ['one', 'two', 'three'], 'iterating over objects works, and ignores the object prototype.');",
      "err": {},
      "isRoot": false,
      "uuid": "87bffbe0-b39f-44ea-ba1d-28cb7b4d179f",
      "parentUUID": "211c7525-73da-4779-b1d5-857a6c6d5548",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should return a function ",
      "fullTitle": "1. _.componse 函数： should return a function ",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var componsedFun = _main2.default.compose(new Function(), new Function());\nassert.equal(true, (0, _util.isTypeof)('Function')(componsedFun));",
      "err": {},
      "isRoot": false,
      "uuid": "82565356-6b2e-4e62-9049-557806e3e0fe",
      "parentUUID": "77b7c14b-564d-4959-ad61-881d56887afc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should passing returned value to next functions",
      "fullTitle": "1. _.componse 函数： should passing returned value to next functions",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var greet = function greet(name) {\n                assert.equal(name, 'MOE!');\n            };",
      "err": {},
      "isRoot": false,
      "uuid": "90dcef99-de3c-4b10-8134-dd02265630b6",
      "parentUUID": "77b7c14b-564d-4959-ad61-881d56887afc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should chain functions and passing values to finally get the result",
      "fullTitle": "1. _.componse 函数： should chain functions and passing values to finally get the result",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var greet = function greet(name) {\n                return 'hi ' + name;\n            };\n            var welcome = _main2.default.compose(greet, exclaim);\n            assert.equal('hi MOE!', welcome('moe'));",
      "err": {},
      "isRoot": false,
      "uuid": "abe6682f-6065-4fdf-b53a-a9a7672fd72e",
      "parentUUID": "77b7c14b-564d-4959-ad61-881d56887afc",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be excuted until all have excuted ",
      "fullTitle": "2. _.after 函数： should be excuted until all have excuted ",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var _this = this;\nvar count = 0;\nvar render = function render() {\n    // console.log('---done!---')\n    assert.equal(count, notes.length);\n    done();\n};\nvar renderNotes = _main2.default.after(notes.length, render);\nnotes.forEach(function (note) {\n    var fn = function (note) {\n        count++;\n        // console.log('  note  ',note);\n        renderNotes();\n    }.bind(_this, note);\n    (0, _util.asyncFunction)(fn);\n});",
      "err": {},
      "isRoot": false,
      "uuid": "bd1a48b3-cb02-46b9-912a-3f9f7dfa3393",
      "parentUUID": "5aa2c644-7f3b-40e5-9e85-a30d6afca606",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return the same result after count",
      "fullTitle": "3. _.before 函数： should return the same result after count",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var initial = 1000,\n    step = 100;\nvar askForRaise = function (initial, step) {\n    var salary = initial;\n    return function () {\n        salary += step;\n        return salary;\n    };\n}(initial, step);\nvar raiseSalaryBy100 = _main2.default.before(count, askForRaise);\nvar randomExcutedCount = count + Math.floor(Math.random() * 100),\n    finalSalary = initial + step * count;\nvar result = Array.from(new Array(randomExcutedCount).keys()).every(function (index) {\n    var curSalary = raiseSalaryBy100();\n    if (index + 1 >= count) return finalSalary === curSalary;\n    return curSalary === initial + step * (index + 1);\n});\nassert.equal(result, true);",
      "err": {},
      "isRoot": false,
      "uuid": "34e53aab-133b-4dfa-aa20-0a8a77c6d5a7",
      "parentUUID": "7ff0ffda-55a0-4764-b9be-467e2e20dcc9",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should pre-fill partial args and get final value",
      "fullTitle": "4. _.partial 函数： should pre-fill partial args and get final value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var add = function add(a, b) {\n    return a + b;\n};\nvar add5 = _main2.default.partial(add, 5);\nassert.equal(15, add5(10));",
      "err": {},
      "isRoot": false,
      "uuid": "59c203a0-bac9-462f-87b0-95f5b6ef27ec",
      "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should remain un-filled when passing _ to the args",
      "fullTitle": "4. _.partial 函数： should remain un-filled when passing _ to the args",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var selectMin = function selectMin() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n    }\n    return Math.min.apply(null, args);\n};\nvar selectMinArgs = _main2.default.partial(selectMin, _main2.default, 4, 5);\nassert.equal(4, selectMinArgs(10));",
      "err": {},
      "isRoot": false,
      "uuid": "3a6b891b-fdd4-4293-a218-5249570b5b3b",
      "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "accepts more arguments than the number of placeholders",
      "fullTitle": "4. _.partial 函数： accepts more arguments than the number of placeholders",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(5, func('a', 'c', 'e'));",
      "err": {},
      "isRoot": false,
      "uuid": "d7033898-bfa1-47d2-a2f8-37c0330bdb06",
      "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "cound remain arg length when some of the placeholders aren't fullfilled when calling",
      "fullTitle": "4. _.partial 函数： cound remain arg length when some of the placeholders aren't fullfilled when calling",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var func = _main2.default.partial(function () {\n    return arguments.length;\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(4, func('a'));",
      "err": {},
      "isRoot": false,
      "uuid": "59e79acc-b6fd-43a6-9dbb-4691ec06475f",
      "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "unfilled placeholders are undefined",
      "fullTitle": "4. _.partial 函数： unfilled placeholders are undefined",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var func = _main2.default.partial(function () {\n    return arguments[2];\n}, _main2.default, 'b', _main2.default, 'd');\nassert.equal(undefined, func('a'));",
      "err": {},
      "isRoot": false,
      "uuid": "485461e5-f69b-495e-bd21-9611e77289cd",
      "parentUUID": "99aa8a45-db5b-438f-b781-7442aeee3eb2",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should wrap the given salutation function",
      "fullTitle": "5. _wrap函数  should wrap the given salutation function",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nhello = _main2.default.wrap(hello, function (func) {\n    return \"before, \" + func(\"moe\") + \", after\";\n});\nassert.equal(hello(), 'before, hello: moe, after');",
      "err": {},
      "isRoot": false,
      "uuid": "1b2c9450-4e34-46d6-b246-838dfe940fa0",
      "parentUUID": "bbf2816b-69e2-47ce-b881-ecd0315fe455",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should hold fn as the first parameter of the wrapper",
      "fullTitle": "5. _wrap函数  should hold fn as the first parameter of the wrapper",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var hello = function hello(name) {\n    return 'hello: ' + name;\n};\nvar wrappedHello = _main2.default.wrap(hello, function (func) {\n    assert.equal(hello, func);\n    return \"before, \" + func(\"moe\") + \", after\";;\n});\nwrappedHello();",
      "err": {},
      "isRoot": false,
      "uuid": "fdabdc90-0b0f-4d97-93ea-d979a43328ee",
      "parentUUID": "bbf2816b-69e2-47ce-b881-ecd0315fe455",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should memoize the value of a fibonacci result and equal to it",
      "fullTitle": "6. _memoize函数  should memoize the value of a fibonacci result and equal to it",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var memoFib = _main2.default.memoize(fib);\nassert.equal(fib(10), 55);\nassert.equal(memoFib(10), 55);",
      "err": {},
      "isRoot": false,
      "uuid": "e4cf382d-ecad-47d6-afc3-94365013a569",
      "parentUUID": "e1c129c2-0165-4e79-8e47-9721df1524b1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should memoize all the result of the function",
      "fullTitle": "6. _memoize函数  should memoize all the result of the function",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var upper = _main2.default.memoize(function (s) {\n    return s.toUpperCase();\n});\nassert.strictEqual(upper('foo'), 'FOO');\nassert.strictEqual(upper('bar'), 'BAR');\nassert.deepEqual(upper.cache, { 'foo': 'FOO', 'bar': 'BAR' }, 'cache return all the cached value');\nassert.property(upper, 'cache');",
      "err": {},
      "isRoot": false,
      "uuid": "eae198a4-95f7-4d83-801f-4172a549c3f8",
      "parentUUID": "e1c129c2-0165-4e79-8e47-9721df1524b1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should store the hashed key as the cache key",
      "fullTitle": "6. _memoize函数  should store the hashed key as the cache key",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var objCacher = _main2.default.memoize(function (value, key) {\n    return { key: key, value: value };\n}, function (value, key) {\n    return key;\n});\nvar myObj = objCacher('a', 'alpha');\nvar myObjAlias = objCacher('b', 'alpha');\nassert.notStrictEqual(myObj, void 0, 'object is created if second argument used as key');\nassert.strictEqual(myObj, myObjAlias, 'object is cached if second argument used as key');\nassert.strictEqual(myObj.value, 'a', 'object is not modified if second argument used as key');",
      "err": {},
      "isRoot": false,
      "uuid": "8e43dcba-13ef-409a-9a44-1e7b2c017026",
      "parentUUID": "e1c129c2-0165-4e79-8e47-9721df1524b1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should have correct prototype , there are two circumstances: especially when called via the new operator",
      "fullTitle": "7. _Bind 函数  should have correct prototype , there are two circumstances: especially when called via the new operator",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var F = function F() {\n    return this;\n};\nvar boundf = _main2.default.bind(F, { hello: 'moe curly' });\nvar Boundf = boundf; // make eslint happy.\nvar newBoundf = new Boundf();\nassert.strictEqual(newBoundf.hello, void 0, 'function should not be bound to the context, to comply with ECMAScript 5');\nassert.strictEqual(boundf().hello, 'moe curly', \"When called without the new operator, it's OK to be bound to the context\");\nassert.ok(newBoundf instanceof F, 'a bound instance is an instance of the original function');",
      "err": {},
      "isRoot": false,
      "uuid": "2e76fb33-5511-4ae1-9eb5-2add5247cfa9",
      "parentUUID": "b1f32f42-79c0-4fb8-8352-7d585b21138e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "can bind a function to a context",
      "fullTitle": "7. _Bind 函数  can bind a function to a context",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var context = { name: 'moe' };\nvar func = function func(arg) {\n    return 'name: ' + (this.name || arg);\n};\nvar bound = _main2.default.bind(func, context);\nassert.strictEqual(bound(), 'name: moe', 'can bind a function to a context');",
      "err": {},
      "isRoot": false,
      "uuid": "434c2199-cfc9-42b8-bcdf-af43abeefae5",
      "parentUUID": "b1f32f42-79c0-4fb8-8352-7d585b21138e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should meet the basic requirements of the bind",
      "fullTitle": "8. _BindAll 函数  should meet the basic requirements of the bind",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var curly = { name: 'curly' };\nvar moe = {\n    name: 'moe',\n    getName: function getName() {\n        return 'name: ' + this.name;\n    },\n    sayHi: function sayHi() {\n        return 'hi: ' + this.name;\n    }\n};\ncurly.getName = moe.getName;\n_main2.default.bindAll(moe, 'getName', 'sayHi');\ncurly.sayHi = moe.sayHi;\nassert.strictEqual(curly.getName(), 'name: curly', 'unbound function is bound to current object');\nassert.strictEqual(curly.sayHi(), 'hi: moe', 'bound function is still bound to original object');",
      "err": {},
      "isRoot": false,
      "uuid": "42a860cf-4cd8-4a08-9c5e-5b9752cd9e8a",
      "parentUUID": "41beb715-75e8-4204-8972-00158f331b1e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should shuffle an obj or an array with equal possibilities ",
      "fullTitle": "1. _.shuffle 函数： should shuffle an obj or an array with equal possibilities ",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.deepEqual(_Collection2.default.shuffle([1]), [1], 'behaves correctly on size 1 arrays');\n            var numbers = _Collection2.default.range(20);\n            var shuffled = _Collection2.default.shuffle(numbers);\n            assert.notDeepEqual(numbers, shuffled, 'does change the order'); // Chance of false negative: 1 in ~2.4*10^18\n            assert.notStrictEqual(numbers, shuffled, 'original object is unmodified');\n            // assert.deepEqual(numbers, shuffled, 'contains the same members before and after shuffle');\n            shuffled = _Collection2.default.shuffle({ a: 1, b: 2, c: 3, d: 4 });\n            assert.strictEqual(shuffled.length, 4);\n            assert.deepEqual(shuffled.sort(), [1, 2, 3, 4], 'works on objects');",
      "err": {},
      "isRoot": false,
      "uuid": "7a1f853c-6c30-4d91-a045-430baf1ac450",
      "parentUUID": "06952709-18ed-4161-abbd-1c7981c70e25",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "each iterators provide value and iteration count",
      "fullTitle": "2. _.each 函数： each iterators provide value and iteration count",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "_Collection2.default.each([1, 2, 3], function (num, i) {\n                assert.strictEqual(num, i + 1, 'each iterators provide value and iteration count');\n            });\n            // const answers = [];\n            // _.each([1, 2, 3], function(num) { answers.push(num); });\n            // assert.deepEqual(answers, [1, 2, 3], 'can iterate a simple array');\n            // let count = 0;\n            // const obj = { 1: 'foo', 2: 'bar', 3: 'baz' };\n            // _.each(obj, function() { count++; console.log(count)});\n            // assert.strictEqual(3, count, 'the fun should be called only 3 times');",
      "err": {},
      "isRoot": false,
      "uuid": "0ff951e4-0699-4020-9e7b-964799628f59",
      "parentUUID": "755aef08-1eaf-4f93-9fd0-d6f44d5a478f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "cound access the original list",
      "fullTitle": "2. _.each 函数： cound access the original list",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var answer = null;\n_Collection2.default.each([1, 2, 3], function (num, index, arr) {\n    if (arr.includes(num)) answer = true;\n});\nassert.ok(answer, 'can reference the original collection from inside the iterator');",
      "err": {},
      "isRoot": false,
      "uuid": "5774ea5d-2ff7-4dd2-9a12-42c1c005b3f6",
      "parentUUID": "755aef08-1eaf-4f93-9fd0-d6f44d5a478f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "cound access the context obj",
      "fullTitle": "2. _.each 函数： cound access the context obj",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var answers = [];\n            _Collection2.default.each([1, 2, 3], function (num) {\n                answers.push(num * this.multiplier);\n            }, { multiplier: 5 });\n            assert.deepEqual(answers, [5, 10, 15], 'context object property accessed');\n            // ensure the each function is JITed\n            // _(1000).times(function() { _.each([], function() {}); });",
      "err": {},
      "isRoot": false,
      "uuid": "aff2da49-3589-4594-8b29-2edab5599cb4",
      "parentUUID": "755aef08-1eaf-4f93-9fd0-d6f44d5a478f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "cound handle other types of list,such as false,null",
      "fullTitle": "2. _.each 函数： cound handle other types of list,such as false,null",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var answers = 0;\n            _Collection2.default.each(null, function () {\n                ++answers;\n            });\n            assert.strictEqual(answers, 0, 'handles a null properly');\n            _Collection2.default.each(false, function () {});\n            var a = [1, 2, 3];\n            assert.strictEqual(_Collection2.default.each(a, function () {}), a);\n            assert.strictEqual(_Collection2.default.each(null, function () {}), null);\n            a = 'test';\n            _Collection2.default.each(a, function (v, i) {\n                assert.strictEqual(v, a[i]);\n            });",
      "err": {},
      "isRoot": false,
      "uuid": "c171f6e1-cc25-453e-b2bd-698d18f80e31",
      "parentUUID": "755aef08-1eaf-4f93-9fd0-d6f44d5a478f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "cound only iterate the owned key-value of the list, ignore those in the prototype",
      "fullTitle": "cound only iterate the owned key-value of the list, ignore those in the prototype cound only iterate the owned key-value of the list, ignore those in the prototype",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "_Collection2.default.each(obj, function (value, key) {\n    answers.push(key);\n});\nassert.deepEqual(answers, ['one', 'two', 'three'], 'iterating over objects works, and ignores the object prototype.');",
      "err": {},
      "isRoot": false,
      "uuid": "87bffbe0-b39f-44ea-ba1d-28cb7b4d179f",
      "parentUUID": "211c7525-73da-4779-b1d5-857a6c6d5548",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "can bind without specifying a context",
      "fullTitle": "7. _Bind 函数  can bind without specifying a context",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "var func = function func(arg) {\n    return 'name: ' + (this.name || arg);\n};\nvar bound = _main2.default.bind(func, null, 'curly');\nvar result = bound();\n// Work around a PhantomJS bug when applying a function with null|undefined.\nassert.ok(result === 'name: curly' || result === 'name: ' + window.name, 'can bind without specifying a context');",
      "err": {
        "estack": "TypeError: Cannot read property 'name' of null\n    at func (test/main.test.js:183:36)\n    at Context.<anonymous> (test/main.test.js:187:26)"
      },
      "isRoot": false,
      "uuid": "95c95576-5260-4607-9441-814b8604ce6e",
      "parentUUID": "b1f32f42-79c0-4fb8-8352-7d585b21138e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "can be bound to any value",
      "fullTitle": "7. _Bind 函数  can be bound to any value",
      "timedOut": false,
      "duration": 1,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "var func = function func(salutation, firstname, lastname) {\n    return salutation + ': ' + firstname + ' ' + lastname;\n};\nfunc = _main2.default.bind(func, this, 'hello', 'moe', 'curly');\nassert.strictEqual(func(), 'hello: moe curly', 'the function was partially applied in advance and can accept multiple arguments');\nfunc = function func() {\n    return this;\n};\nassert.strictEqual(_typeof(_main2.default.bind(func, 0)()), 'object', 'binding a primitive to `this` returns a wrapped primitive');\nassert.strictEqual(_main2.default.bind(func, 0)().valueOf(), 0, 'can bind a function to `0`');\nassert.strictEqual(_main2.default.bind(func, '')().valueOf(), '', 'can bind a function to an empty string');\nassert.strictEqual(_main2.default.bind(func, false)().valueOf(), false, 'can bind a function to `false`');",
      "err": {
        "name": "AssertionError",
        "message": "binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'",
        "showDiff": true,
        "actual": "number",
        "expected": "object",
        "estack": "AssertionError: binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'\n    at Function.assert.strictEqual (node_modules/chai/lib/chai/interface/assert.js:178:32)\n    at Context.<anonymous> (test/main.test.js:201:20)",
        "diff": "- number\n+ object\n",
        "stack": "AssertionError: binding a primitive to `this` returns a wrapped primitive: expected 'number' to equal 'object'\n    at Function.assert.strictEqual (node_modules/chai/lib/chai/interface/assert.js:178:32)\n    at Context.<anonymous> (test/main.test.js:201:20)"
      },
      "isRoot": false,
      "uuid": "528df25a-e5bc-4430-8d8e-8dbc399a67db",
      "parentUUID": "b1f32f42-79c0-4fb8-8352-7d585b21138e",
      "isHook": false,
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}